<?xml version="1.0" encoding="UTF-8"?><Extension debug="false" version="1.0" xmlns="http://spss.com/clementine/extensions" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://spss.com/clementine/extensions http://xml.spss.com/clementine/extensions/CLEFSpecificationFile.xsd"><ExtensionDetails copyright="(c) 2012 SPSS." description="" id="PROCESS Procedure for SPSS, written by Andrew F. Hayes (www.afhayes.com)" label="" provider="SPSS, Inc." providerTag="spss" version="1.0"/><Resources><Bundle id="bundle1" path="PROCESS Procedure for SPSS, written by Andrew F. Hayes (www.afhayes.com)" type="properties"/></Resources><CommonObjects><Actions><Action id="PROCESS Procedure for SPSS, written by Andrew F. Hayes (www.afhayes.com)_action" imagePath="" label="PROCESS, by Andrew F. Hayes (http://www.afhayes.com)" labelKey="PROCESS Procedure for SPSS, written by Andrew F. Hayes (www.afhayes.com)_action.LABEL"/></Actions></CommonObjects><UserInterface><Controls><MenuItem action="PROCESS Procedure for SPSS, written by Andrew F. Hayes (www.afhayes.com)_action" offset="8" showIcon="false" spssMenu="Analyze.analyze_regression"/></Controls></UserInterface><Node id="PROCESS Procedure for SPSS, written by Andrew F. Hayes (www.afhayes.com)" label="" labelKey="PROCESS Procedure for SPSS, written by Andrew F. Hayes (www.afhayes.com).LABEL" type="modelBuilder"><Properties><Property name="PROCESS Procedure for SPSS, written by Andrew F. Hayes (www.afhayes.com)" syntax="/* PROCESS for SPSS */.&#10;/* Written by Andrew F. Hayes */.&#10;/* The Ohio State University */.&#10;/* Download documentation at */.&#10;/* http://www.afhayes.com */.&#10;/* Beta release 040612 */.&#10;/* Use at your own risk */.&#10;/* hayes.338@osu.edu */.&#10;&#10;set printback = off.&#10;define bcboot (databcbt = !charend ('/')/estmte = !charend ('/') !default(9999)).&#10;compute temp = !databcbt.&#10;compute temp(GRADE(!databcbt)) = !databcbt.&#10;compute badlo = 0.&#10;compute badhi = 0.&#10;do if (!estmte &lt;&gt; 9999).&#10;  compute pv=csum(temp &lt; !estmte)/boot.&#10;  compute ppv = pv. &#10;  do if (pv &gt; .5).&#10;    compute ppv = 1-pv.&#10;  end if.&#10;  compute y5=sqrt(-2*ln(ppv)).&#10;  compute xp=y5+((((y5*p4+p3)*y5+p2)*y5+p1)*y5+p0)/((((y5*q4+q3)*y5+q2)*y5+q1)*y5+q0).&#10;  do if (pv &lt;= .5).&#10;    compute xp = -xp.&#10;  end if.&#10;  compute cilow=trunc(boot*(cdfnorm(2*xp+xp2))).&#10;  compute cihigh=trunc(boot*(cdfnorm(2*xp+(-xp2))))+1.&#10;  do if (cilow &lt; 1).&#10;    compute cilow = 1.&#10;     compute booterr=1.&#10;     compute badlo = 1.&#10;  end if.&#10;  do if (cihigh &gt; boot).&#10;    compute cihigh = boot.&#10;    compute booterr=1.&#10;     compute badhi = 1.&#10;  end if.&#10;  compute llcit=temp(cilow,1).&#10;  compute ulcit=temp(cihigh,1).&#10;end if.&#10;do if (!estmte = 9999).&#10;   compute llcit=temp(cilow,1).&#10;   compute ulcit=temp(cihigh,1).&#10;end if.&#10;!enddefine.&#10;&#10;define process (vars = !charend('/')/model = !charend('/') !default(75)/y = !charend('/')/m = !charend('/')/x = !charend ('/')&#10;   /w = !charend('/') !default(xxx)/z = !charend('/') !default(xxx)/v = !charend('/') !default(xxx)/q = !charend ('/') !default(xxx)/conf = !charend('/') !default(95)&#10;   /hc3 = !charend('/') !default(0)/cluster = !charend('/') !default(xxx)/wmodval = !charend('/') !default (999)/zmodval = !charend('/') !default(999)/&#10;   vmodval = !charend('/') !default (999)/qmodval = !charend('/') !default(999)/mmodval = !charend('/') !default (999)/xmodval = !charend('/') !default (999)&#10;  /boot = !charend('/') !default(1000)/center = !charend('/') !default(0)/quantile = !charend('/') !default(0)/effsize = !charend('/') !default(0)/normal = !charend('/') !default(0)&#10;   /varorder = !charend('/') !default(2)/total = !charend('/') !default(0)/plot = !charend('/') !default(0)/detail = !charend('/') !default(1)&#10;   /iterate = !charend('/') !default(10000)/converge = !charend('/') !default(0.00000001)/percent = !charend('/') !default(0)/jn = !charend('/') !default(0)/&#10;     coeffci = !charend('/') !default(0)/covmy = !charend('/') !default(0)/contrast = !charend('/') !default(0)).&#10;set printback=off.&#10;string w999999t (A8).&#10;string z999999t (A8).&#10;string q999999t (A8).&#10;string v999999t (A8).&#10;compute w999999t = (!quote(!w)).&#10;compute z999999t = (!quote(!z)).&#10;compute q999999t = (!quote(!q)).&#10;compute v999999t = (!quote(!v)).&#10;set mxloop = 100000000.&#10;set printback = off.&#10;matrix.&#10;get dat/file = */variables = !vars/names = vnames/missing = 9999.&#10;compute ninit = nrow(dat). &#10;get dat/file = */variables = !vars/names = vnames/missing = omit. &#10;get tmp/file = */variables = !y/names = yname/missing = omit.&#10;get tmp/file = */variables = !x/names = xname/missing = omit.&#10;get tmp/file = */variables = !m/names = mnames/missing = omit.&#10;get tmp/file = */variables = w999999t z999999t v999999t q999999t.&#10;compute wname=tmp(1,1).&#10;do if (wname = ' ').&#10;  compute wname = &quot;xxx&quot;.&#10;end if.&#10;compute zname=tmp(1,2).&#10;do if (zname = ' ').&#10;  compute zname = &quot;xxx&quot;.&#10;end if.&#10;compute vname=tmp(1,3).&#10;do if (vname = ' ').&#10;  compute vname = &quot;xxx&quot;.&#10;end if.&#10;compute qname=tmp(1,4).&#10;do if (qname = ' ').&#10;  compute qname = &quot;xxx&quot;.&#10;end if.&#10;compute n = nrow(dat).&#10;compute p0=-.322232431088.&#10;compute p1 = -1.&#10;compute p2 = -.342242088547.&#10;compute p3 = -.0204231210245.&#10;compute p4 = -.0000453642210148.&#10;compute q0 = .0993484626060.&#10;compute q1 = .588581570495.&#10;compute q2 = .531103462366.&#10;compute q3 = .103537752850.&#10;compute q4 = .0038560700634.&#10;compute badend = 0.&#10;compute priorlo = -9999999.&#10;compute priorhi = 9999999.&#10;compute criterr = 0.&#10;compute cluster = 0.&#10;compute clsdmy = 0.&#10;compute jndich = 0.&#10;compute contrast = (!contrast = 1).&#10;compute booterr = 0.&#10;compute effsize = (!effsize = 1).&#10;compute note = make(10,1,0).&#10;compute notes = 1.&#10;compute iterr = 0.&#10;compute clsmtch = 0.&#10;compute quantile = (!quantile = 1).&#10;compute jn = (!jn = 1).&#10;compute center = (!center = 1).&#10;compute detail = (!detail = 1).&#10;compute coeffci = (!coeffci = 1).&#10;compute conf = !conf.&#10;compute bconoff=(!percent &lt;&gt; 1).&#10;compute covmy = trunc(!covmy).&#10;do if (covmy &lt; 0 or covmy &gt; 2).&#10;   compute covmy = 0.&#10;end if.&#10;do if (trunc(conf) ge 100 or (trunc(conf) le 50)).&#10;  compute conf = 95.&#10;  compute note(notes,1) = 1.&#10;  compute notes = notes + 1.&#10;end if.&#10;do if (n &lt; ninit).&#10;  compute nmiss = ninit-n.&#10;  compute note(notes,1) = 11.&#10;  compute notes = notes + 1.&#10;end if.&#10;compute errs = 0.&#10;compute quantd = {0,0,0,0,0,0}.&#10;compute quantc = {0,0,0,0,0,0}.&#10;compute mcheck = 0.&#10;compute ttt = 0.&#10;compute plot = (!plot &lt;&gt; 0).&#10;compute runerrs = make(50,1,0).&#10;compute model = trunc(!model).&#10;do if (jn = 1 and model &lt;&gt; 1 and model &lt;&gt; 3).&#10;  compute note(notes,1) = 7.&#10;  compute notes = notes + 1.&#10;end if.&#10;do if (model &gt; 74) or (model &lt; 1).&#10;  compute model = 75.&#10;  compute critterr = 1.&#10;  compute errs = errs+1.&#10;  compute runerrs(errs,1) = 19.&#10;end if.&#10;compute toteff = 0.&#10;compute toteff = ((!total = 1)*(!model = 4 or !model = 6)).&#10;compute normal = !normal.&#10;compute varorder = !varorder.&#10;compute hc3 = (!hc3 &lt;&gt; 0).&#10;compute clname = !quote(!cluster).&#10;compute centvar = {&quot;xxx&quot;}.&#10;compute modelm =&#10;{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1;&#10; 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2;&#10; 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3;&#10; 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4;&#10; 0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5;&#10; 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6;&#10; 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7;&#10; 1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,8;&#10; 1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9;&#10; 1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,10;&#10; 1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11;&#10; 1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,12;&#10; 1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,13;&#10; 0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14;&#10; 0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,15;&#10; 0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16;&#10; 0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,17;&#10; 0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,18;&#10; 0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,19;&#10; 0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,20;&#10; 1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21;&#10; 1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,22;&#10; 1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23;&#10; 1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,24;&#10; 1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25;&#10; 1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,26;&#10; 1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,27;&#10; 1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,28;&#10; 1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,29;&#10; 1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,30;&#10; 1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,31;&#10; 1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,32;&#10; 1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,33;&#10; 1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,34;&#10; 1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,35;&#10; 1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,36;&#10; 1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,37;&#10; 1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,38;&#10; 1,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,39;&#10; 1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,40;&#10; 1,0,0,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,41;&#10; 1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,42;&#10; 1,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,43;&#10; 1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,44;&#10; 1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,45;&#10; 1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,46;&#10; 1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,47;&#10; 1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,48;&#10; 1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,49;&#10; 1,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,50;&#10; 1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,51;&#10; 1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,52;&#10; 1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,53;&#10; 1,1,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,54;&#10; 1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,55;&#10; 1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,56;&#10; 1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,57;&#10; 1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,58;&#10; 1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,59;&#10; 1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,60;&#10; 1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,61;&#10; 1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,62;&#10; 1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,63;&#10; 1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,64;&#10; 1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,65;&#10; 1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,66;&#10; 1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,67;&#10; 1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,68;&#10; 1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,69;&#10; 1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,70;&#10; 1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,0,0,0,71;&#10; 1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,72;&#10; 1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,1,1,0,73;&#10; 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,74;&#10; 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75}.&#10;compute wm = modelm(model, 1).&#10;compute zm = modelm(model, 2).&#10;compute wzm = modelm(model, 3).&#10;compute vy = modelm(model, 4).&#10;compute qy = modelm(model, 5).&#10;compute vqy = modelm(model, 6).&#10;compute wy = modelm(model, 7).&#10;compute zy = modelm(model, 8).&#10;compute wzy = modelm(model, 9).&#10;compute vxy = modelm(model, 10).&#10;compute qxy = modelm(model, 11).&#10;compute vqxy = modelm(model, 12).&#10;compute wmy = modelm(model, 13).&#10;compute wvmy = modelm(model, 14).&#10;compute wvxy = modelm(model, 15).&#10;compute zmy = modelm(model,16).&#10;compute wzmy = modelm(model,17).&#10;compute xmy = modelm(model,18).&#10;release modelm.&#10;do if (ncol(xname) &lt;&gt; 1).&#10;  compute errs = errs+1.&#10;  compute runerrs(errs,1) = 20.&#10;  compute criterr = 1.&#10;end if.&#10;do if (ncol(yname) &lt;&gt; 1).&#10;  compute errs = errs+1.&#10;  compute runerrs(errs,1) = 21.&#10;  compute criterr = 1.&#10;end if.&#10;compute xlist = (wm or zm or wzm or wy or zy or wzy or vxy or qxy or vqxy or wvxy or xmy).&#10;compute mlist = (vy or qy or vqy or zmy or wmy or wzmy or xmy or (model &lt; 4)).&#10;compute bad = 0.&#10;do if (criterr = 0).&#10;  compute werr = 0.&#10;  compute verr = 0.&#10;  compute qerr = 0.&#10;  compute zerr = 0.&#10;  compute yerr = 1.&#10;  compute wlist = (wm or wzm or wy or wzy or wm or wvmy or wvmy or wvxy or wzmy).&#10;  do if (wlist = 1 and wname = &quot;xxx&quot;).&#10;    compute werr = 1.&#10;    compute wlist = 0.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 4.&#10;  end if.&#10;  do if (wlist = 1 and ((wname = qname) or (wname = vname) or (wname = zname) or (wname = xname) or (wname = yname))).&#10;    compute werr = 4.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 12).&#10;  end if.&#10;  compute zlist = (zm or wzm or zy or wzy or zmy or wzmy).&#10;  do if (zlist = 1 and zname = &quot;xxx&quot;).&#10;    compute zerr = 1.&#10;    compute zlist = 0.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 5.&#10;  end if.&#10;  do if (zlist = 1 and ((zname = qname) or (zname = vname) or (zname = wname) or (zname = xname) or (zname = yname))).&#10;    compute zerr = 4.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 13.&#10;  end if.&#10;  compute qlist = (qy or vqy or qxy or vqxy).&#10;  do if (qlist = 1 and qname = &quot;xxx&quot;).&#10;    compute qerr = 1.&#10;    compute qlist = 0.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 6.&#10;  end if.&#10;  do if (qlist = 1 and ((qname = zname) or (qname = vname) or (qname = wname) or (qname = xname) or (qname = yname))).&#10;    compute qerr = 4.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 14.&#10;  end if.&#10;  compute vlist = (vy or vqy or vxy or vqxy or wvmy or wvxy).&#10;  do if (vlist = 1 and vname = &quot;xxx&quot;).&#10;    compute  verr = 1.&#10;    compute vlist = 0.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 7.&#10;  end if.&#10;  do if (vlist = 1 and ((vname = zname) or (vname = qname) or (vname = wname) or (vname = xname) or (vname = yname))).&#10;    compute qerr = 4.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 15.&#10;  end if.&#10;  do if (wlist = 0 and wname &lt;&gt; &quot;xxx&quot;).&#10;    compute werr = 2.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 8.&#10;  end if.&#10;  do if (zlist = 0 and zname &lt;&gt; &quot;xxx&quot;).&#10;    compute zerr = 2.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 9.&#10;  end if.&#10;  do if (qlist = 0 and qname &lt;&gt; &quot;xxx&quot;).&#10;    compute qerr = 2.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 10.&#10;  end if.&#10;  do if (vlist = 0 and vname &lt;&gt; &quot;xxx&quot;).&#10;    compute verr = 2.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 11.&#10;  end if.&#10;  do if (hc3 = 1).&#10;    compute note(notes,1) = 3.&#10;    compute notes = notes+1.&#10;  end if.&#10;  compute alpha2 = (1-(conf/100))/2.&#10;  compute y5=sqrt(-2*ln(alpha2)).&#10;  compute xp2=-(y5+((((y5*p4+p3)*y5+p2)*y5+p1)*y5+p0)/((((y5*q4+q3)*y5+q2)*y5+q1)*y5+q0)).&#10;  compute cons = make(n,1,1).&#10;  compute temp = (n*sscp(dat))-(t(csum(dat))*(csum(dat))).&#10;  compute temp = temp/(n*(n-1)).&#10;  compute temp = csum(((diag(temp))=0)).&#10;  do if (temp &gt; 0).&#10;    compute critterr = 1.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 27.&#10;  end if.&#10;  compute nmeds = ncol(mnames).&#10;  compute sobel = make(nmeds,4,-999).&#10;  do if (model = 6 and nmeds &gt; 4).&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1)=2.&#10;  end if.&#10;  do if (model &lt; 4 and nmeds &gt; 1).&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 3.&#10;  end if.&#10;  compute nmods = (model = 74).&#10;  compute bad = 0.&#10;  compute intcnt = 1.&#10;  compute modvals = 0.&#10;  compute modvalsd = 0.&#10;  compute yintemp = {&quot;int_1&quot;, &quot;int_2&quot;, &quot;int_3&quot;, &quot;int_4&quot;, &quot;int_5&quot;, &quot;int_6&quot;, &quot;int_7&quot;, &quot;int_8&quot;, &quot;int_9&quot;, &quot;int_10&quot;, &quot;int_11&quot;, &quot;int_12&quot;, &quot;int_13&quot;, &quot;int_14&quot;, &quot;int_15&quot;}.&#10;  compute yintemp = {yintemp, &quot;int_16&quot;, &quot;int_17&quot;, &quot;int_18&quot;, &quot;int_19&quot;, &quot;int_20&quot;, &quot;int_21&quot;, &quot;int_22&quot;, &quot;int_23&quot;, &quot;int_24&quot;, &quot;int_25&quot;, &quot;int_26&quot;, &quot;int_27&quot;, &quot;int_28&quot;}.&#10;  compute cntname={&quot;(C1)&quot;;&quot;(C2)&quot;;&quot;(C3)&quot;;&quot;(C4)&quot;;&quot;(C5)&quot;;&quot;(C6)&quot;;&quot;(C7)&quot;;&quot;(C8)&quot;;&quot;(C9)&quot;;&quot;(C10)&quot;;&quot;(C11)&quot;;&quot;(C12)&quot;;&quot;(C13)&quot;;&quot;(C14)&quot;;&quot;(C15)&quot;;&quot;(C16)&quot;;&quot;(C17)&quot;}.&#10;  compute cntname={cntname;&quot;(C18)&quot;;&quot;(C19)&quot;;&quot;(C20)&quot;;&quot;(C21)&quot;;&quot;(C22)&quot;;&quot;(C23)&quot;;&quot;(C24)&quot;;&quot;(C25)&quot;;&quot;(C26)&quot;;&quot;(C27)&quot;;&quot;(C28)&quot;;&quot;(C29)&quot;;&quot;(C30)&quot;;&quot;(C31)&quot;}.&#10;  compute cntname={cntname;&quot;(C32)&quot;;&quot;(C33)&quot;;&quot;(C34)&quot;;&quot;(C35)&quot;;&quot;(C36)&quot;;&quot;(C37)&quot;;&quot;(C38)&quot;;&quot;(C39)&quot;;&quot;(C40)&quot;;&quot;(C41)&quot;;&quot;(C42)&quot;;&quot;(C43)&quot;;&quot;(C44)&quot;;&quot;(C45)&quot;}.&#10;  compute cntname={cntname;&quot;(C46)&quot;;&quot;(C47)&quot;;&quot;(C48)&quot;;&quot;(C49)&quot;;&quot;(C50)&quot;;&quot;(C51)&quot;;&quot;(C52)&quot;;&quot;(C53)&quot;;&quot;(C54)&quot;;&quot;(C55)&quot;;&quot;(C56)&quot;;&quot;(C57)&quot;;&quot;(C58)&quot;;&quot;(C59)&quot;}.&#10;  compute cntname={cntname;&quot;(C60)&quot;;&quot;(C61)&quot;;&quot;(C62)&quot;;&quot;(C63)&quot;;&quot;(C64)&quot;;&quot;(C65)&quot;;&quot;(C66)&quot;;&quot;(C67)&quot;;&quot;(C68)&quot;;&quot;(C69)&quot;;&quot;(C70)&quot;;&quot;(C71)&quot;;&quot;(C72)&quot;;&quot;(C73)&quot;}.&#10;  compute cntname={cntname;&quot;(C74)&quot;;&quot;(C75)&quot;;&quot;(C76)&quot;;&quot;(C77)&quot;;&quot;(C78)&quot;;&quot;(C79)&quot;;&quot;(C80)&quot;;&quot;(C81)&quot;;&quot;(C82)&quot;;&quot;(C83)&quot;;&quot;(C84)&quot;;&quot;(C85)&quot;;&quot;(C86)&quot;;&quot;(C87)&quot;}.&#10;  compute cntname={cntname;&quot;(C88)&quot;;&quot;(C89)&quot;;&quot;(C90)&quot;;&quot;(C91)&quot;;&quot;(C92)&quot;;&quot;(C93)&quot;;&quot;(C94)&quot;;&quot;(C95)&quot;;&quot;(C96)&quot;;&quot;(C97)&quot;;&quot;(C98)&quot;;&quot;(C99)&quot;;&quot;(C100)&quot;;&quot;(C101)&quot;}.&#10;  compute cntname={cntname;&quot;(C102)&quot;;&quot;(C103)&quot;;&quot;(C104)&quot;;&quot;(C105)&quot;}.&#10;  compute modvnm = {&quot;xxx&quot;, &quot;xxx&quot;, &quot;xxx&quot;, &quot;xxx&quot;, &quot;xxx&quot;}.&#10;  compute modvnm2 = {&quot;xxx&quot;, &quot;xxx&quot;, &quot;xxx&quot;, &quot;xxx&quot;, &quot;xxx&quot;}.&#10;  compute mlab = {&quot;   M1 = &quot;; &quot;   M2 =&quot;; &quot;   M3 =&quot;; &quot;   M4 =&quot;; &quot;   M5 =&quot;; &quot;   M6 =&quot;; &quot;   M7 =&quot;; &quot;   M8 =&quot;; &quot;   M9 =&quot;; &quot;  M10 =&quot;}.&#10;  compute m = make(n,nmeds,1).&#10;  compute mmat = make(16,nmeds,0).&#10;  compute ymat = make(8,nmeds,0).&#10;  compute deco = make(10,1,0).&#10;  compute modmat = make(5,5,999).&#10;  compute modmatv = make(1,5,1).&#10;  compute modmatp = make(1,5,0).&#10;  compute modprod = modmatv.&#10;  compute iterate = abs(trunc(!iterate)).&#10;  compute converge = abs(!converge).&#10;  compute boot = !boot.&#10;  compute adjust = 0.&#10;  do if (boot &lt;&gt; 0).&#10;    loop.&#10;      compute cilow = trunc(boot*(1-(conf/100))/2).&#10;      compute cihigh = trunc((boot*(conf/100)+(boot*(1-(conf/100))/2)))+1.&#10;      do if (cilow &lt; 1 or cihigh &gt; boot).&#10;        compute boot=trunc((boot+1000)/1000)*1000.&#10;        compute adjust = 1.&#10;      end if.&#10;    end loop if (cilow gt 0 and cihigh le boot).&#10;    do if (adjust = 1).&#10;      compute note(notes,1)=6.&#10;      compute notes = notes+1.&#10;    end if.&#10;  end if.&#10;  do if (model = 6 and nmeds &gt; 1).&#10;    compute mmpaths = make((nmeds+2),(nmeds+2),0).&#10;    do if (nmeds = 2).&#10;      compute indboot = make(boot+1, 3, 999).&#10;    else if (nmeds = 3).&#10;      compute indboot = make(boot+1, 7, 999).&#10;    else if (nmeds = 4).&#10;      compute indboot = make(boot+1, 15, 999).&#10;    end if.&#10;    compute indlbl = {&quot;Total:&quot;; &quot;Ind1 :&quot;; &quot;Ind2 :&quot;; &quot;Ind3 :&quot;; &quot;Ind4 :&quot;; &quot;Ind5 :&quot;; &quot;Ind6 :&quot;; &quot;Ind7 :&quot;; &quot;Ind8 :&quot;; &quot;Ind9 :&quot;; &quot;Ind10:&quot;; &quot;Ind11:&quot;; &quot;Ind12:&quot;; &quot;Ind13:&quot;; &quot;Ind14:&quot;; &quot;Ind15:&quot;}.&#10;    compute indlbl2 = {&quot;Ind1&quot;; &quot;Ind2&quot;; &quot;Ind3&quot;; &quot;Ind4&quot;; &quot;Ind5&quot;; &quot;Ind6&quot;; &quot;Ind7&quot;; &quot;Ind8&quot;; &quot;Ind9&quot;; &quot;Ind10&quot;; &quot;Ind11&quot;; &quot;Ind12&quot;; &quot;Ind13&quot;; &quot;Ind14&quot;; &quot;Ind15&quot;}.&#10;    compute indces = make(boot+1, 4, 999).&#10;  end if.&#10;  do if (model &lt; 4).&#10;    compute boot = 0.&#10;    compute cmat = make(10,1,0).&#10;    compute zmat = make(10,1,0).&#10;  end if.&#10;  compute nvarch = make(1,ncol(dat),0).&#10;  compute wmatch = 0.&#10;  compute zmatch = 0.&#10;  compute vmatch = 0.&#10;  compute qmatch = 0.&#10;  compute mmatch=0.&#10;  loop i = 1 to ncol(vnames).&#10;    do if (vnames(:,i)=yname).&#10;      compute y = dat(:,i).&#10;      compute nvarch(1,i)=1.&#10;      compute yerr = 0.&#10;      do if ((yname = xname) or (yname = wname) or (yname = zname) or (yname = vname) or (yname = qname)).&#10;        compute errs = errs+1.&#10;        compute runerrs(errs,1)=17.&#10;      end if.&#10;    end if.&#10;    do if (vnames(:,i)=xname).&#10;      compute x = dat(:,i).&#10;      compute nvarch(1,i)=1.&#10;      compute xdich = 1.&#10;      loop jj = 1 to n.&#10;         do if ((x(jj,1) &lt;&gt; cmin(x)) and (x(jj,1) &lt;&gt; cmax(x))).&#10;           compute xdich = 0.&#10;           break.&#10;        end if.&#10;      end loop.    &#10;      compute xmean = csum(x)/n.&#10;      do if (center = 1 and (model &lt; 4 or xlist &gt; 0)).&#10;        compute meanvec = make(n,1, xmean). &#10;        compute x = x-meanvec.&#10;        compute centvar = {centvar, xname}.&#10;      end if.&#10;      compute xmean = csum(x)/n.&#10;      compute tmp = x-(cons*xmean).&#10;      compute xsd = sqrt((1/(n-1))*(t(tmp)*tmp)).&#10;      do if (xdich = 0).&#10;         compute quantc(1,6) = 1.&#10;        compute matx = {xmean-xsd; xmean; xmean+xsd}.&#10;        do if (quantile = 1).&#10;          compute quantd(1,6) = 1.&#10;          compute quantc(1,6) = 0.&#10;          compute tmp = x.&#10;          compute tmp(GRADE(x)) = x.&#10;          compute matx = {tmp(trunc(n*.10),1);tmp(trunc(n*.25),1); tmp(trunc(n*.50),1); tmp(trunc(n*0.75),1); tmp(trunc(n*.90),1)}.&#10;        end if.&#10;      end if.&#10;      do if (xdich = 1).&#10;        compute matx = {cmin(x); cmax(x)}.&#10;      end if. &#10;      do if (!xmodval &lt;&gt; 999).&#10;        compute matx = !xmodval.&#10;        compute quantd(1,6) = 0.&#10;        compute quantc(1,6) = 0.&#10;      end if.&#10;    end if.&#10;    do if (werr = 0 and wlist = 1).&#10;      do if (vnames(:,i)=wname).&#10;        compute werr = 0.&#10;        compute wmatch = 1.&#10;        compute w = dat(:,i).&#10;        do if (center = 1).&#10;          compute meanvec = make(n,1,csum(w)/n). &#10;          compute w = w-meanvec.&#10;          compute centvar = {centvar, wname}.&#10;        end if.&#10;        compute nvarch(1,i)=1.&#10;        compute nmods = nmods + 1.&#10;        compute wmean = csum(w)/n.&#10;        compute tmp = w-(cons*wmean).&#10;        compute wsd = sqrt((1/(n-1))*(t(tmp)*tmp)).&#10;        compute wdich = 1.&#10;        loop jj = 1 to n.&#10;          do if ((w(jj,1) &lt;&gt; cmin(w)) and (w(jj,1) &lt;&gt; cmax(w))).&#10;            compute wdich = 0.&#10;            break.&#10;          end if.&#10;        end loop. &#10;        do if (model = 3).&#10;          compute jndich=wdich.&#10;          compute jnmin=cmin(w).&#10;          compute jnmax=cmax(w).&#10;        end if.&#10;        do if (wdich = 0).&#10;          compute matw = {wmean-wsd; wmean; wmean+wsd}.&#10;          compute quantc(1,1) = 1.&#10;          do if (quantile = 1).&#10;            compute quantd(1,1) = 1.&#10;            compute quantc(1,1) = 0.&#10;            compute tmp = w.&#10;            compute tmp(GRADE(w)) = w.&#10;            compute matw = {tmp(trunc(n*.10),1);tmp(trunc(n*.25),1); tmp(trunc(n*.50),1); tmp(trunc(n*0.75),1); tmp(trunc(n*.90),1)}.&#10;          end if.&#10;        end if.&#10;        do if (wdich = 1).&#10;          compute matw = {cmin(w); cmax(w)}.&#10;        end if. &#10;        do if (!wmodval &lt;&gt; 999).&#10;          compute matw = !wmodval.&#10;          compute quantd(1,1) = 0.&#10;          compute quantc(1,1) = 0.&#10;        end if.&#10;        compute modmatv(1,1)=nrow(matw).&#10;        compute modmat((1:nrow(matw)), 1) = matw.&#10;        compute modvnm(1,1)=wname.&#10;        compute modmatp(1,1) = 1.&#10;      end if.&#10;    end if.&#10;    do if (zerr = 0 and zlist = 1).&#10;      do if (vnames(:,i)=zname).&#10;        compute zerr = 0.&#10;        compute zmatch = 1.&#10;        compute z = dat(:,i).&#10;        do if (center = 1).&#10;          compute meanvec = make(n,1,csum(z)/n). &#10;          compute z = z-meanvec.&#10;          compute centvar = {centvar, zname}.&#10;        end if.&#10;        compute nvarch(1,i)=1.&#10;        compute nmods = nmods + 1.&#10;        compute zmean = csum(z)/n.&#10;        compute tmp = z-(cons*zmean).&#10;        compute zsd = sqrt((1/(n-1))*(t(tmp)*tmp)).&#10;        compute zdich = 1.&#10;        loop jj = 1 to n.&#10;          do if ((z(jj,1) &lt;&gt; cmin(z)) and (z(jj,1) &lt;&gt; cmax(z))).&#10;            compute zdich = 0.&#10;            break.&#10;          end if.&#10;        end loop. &#10;        do if (zdich = 0).&#10;          compute matz = {zmean-zsd; zmean; zmean+zsd}.&#10;          compute quantc(1,2) = 1.&#10;          do if (quantile = 1).&#10;            compute quantd(1,2) = 1.&#10;            compute quantc(1,2) = 0.&#10;            compute tmp = z.&#10;            compute tmp(GRADE(z)) = z.&#10;            compute matz = {tmp(trunc(n*.10),1); tmp(trunc(n*.25),1); tmp(trunc(n*.50),1); tmp(trunc(n*0.75),1); tmp(trunc(n*.90),1)}.&#10;          end if.&#10;        end if.&#10;        do if (zdich = 1).&#10;          compute matz = {cmin(z); cmax(z)}.&#10;        end if. &#10;        do if (!zmodval &lt;&gt; 999).&#10;          compute matz = !zmodval.&#10;          compute quantd(1,2) = 0.&#10;          compute quantc(1,2) = 0.&#10;        end if.&#10;        compute modmatv(1,2)=nrow(matz).&#10;        compute modmat((1:nrow(matz)), 2) = matz.&#10;        compute modvnm(1,2)=zname.&#10;        compute modmatp(1,2) = 1.&#10;      end if.&#10;    end if.&#10;    do if (verr = 0 and vlist = 1).&#10;      do if (vnames(:,i)=vname).&#10;        compute verr = 0.&#10;        compute vmatch = 1.&#10;        compute v = dat(:,i).&#10;        do if (center = 1).&#10;          compute meanvec = make(n,1,csum(v)/n). &#10;          compute v = v-meanvec.&#10;          compute centvar = {centvar, vname}.&#10;        end if.&#10;        compute nvarch(1,i)=1.&#10;        compute nmods = nmods + 1.&#10;        compute vmean = csum(v)/n.&#10;        compute tmp = v-(cons*vmean).&#10;        compute vsd = sqrt((1/(n-1))*(t(tmp)*tmp)).&#10;        compute vdich = 1.&#10;        loop jj = 1 to n.&#10;          do if ((v(jj,1) &lt;&gt; cmin(v)) and (v(jj,1) &lt;&gt; cmax(v))).&#10;            compute vdich = 0.&#10;            break.&#10;          end if.&#10;        end loop.&#10;        do if (vdich = 0).&#10;          compute matv = {vmean-vsd; vmean; vmean+vsd}.&#10;          compute quantc(1,3) = 1.&#10;          do if (quantile = 1).&#10;            compute quantd(1,3) = 1.&#10;            compute quantc(1,3) = 0.&#10;            compute tmp = v.&#10;            compute tmp(GRADE(v)) = v.&#10;            compute matv = {tmp(trunc(n*.10),1); tmp(trunc(n*.25),1); tmp(trunc(n*.50),1); tmp(trunc(n*0.75),1); tmp(trunc(n*.90),1)}.&#10;          end if.&#10;        end if.&#10;        do if (vdich = 1).&#10;          compute matv = {cmin(v); cmax(v)}.&#10;        end if. &#10;        do if (!vmodval &lt;&gt; 999).&#10;          compute matv = !vmodval.&#10;          compute quantd(1,3) = 0.&#10;          compute quantc(1,3) = 0.&#10;        end if.&#10;        compute modmatv(1,3)=nrow(matv).&#10;        compute modmat((1:nrow(matv)), 3) = matv.&#10;        compute modvnm(1,3)=vname.&#10;        compute modmatp(1,3) = 1.&#10;      end if.&#10;    end if.&#10;    do if (qerr = 0 and qlist = 1).&#10;      do if (vnames(:,i)=qname).&#10;        compute qerr = 0.&#10;        compute qmatch = 1.&#10;        compute q = dat(:,i).&#10;        do if (center = 1).&#10;          compute meanvec = make(n,1,csum(q)/n). &#10;          compute q = q-meanvec.&#10;          compute centvar = {centvar, qname}.&#10;        end if.&#10;        compute nvarch(1,i)=1.&#10;        compute nmods = nmods + 1.&#10;        compute qmean = csum(q)/n.&#10;        compute tmp = q-(cons*qmean).&#10;        compute qsd = sqrt((1/(n-1))*(t(tmp)*tmp)).&#10;        compute qdich = 1.&#10;        loop jj = 1 to n.&#10;          do if ((q(jj,1) &lt;&gt; cmin(q)) and (q(jj,1) &lt;&gt; cmax(q))).&#10;            compute qdich = 0.&#10;            break.&#10;          end if.&#10;        end loop.&#10;        do if (qdich = 0).&#10;          compute matq = {qmean-qsd; qmean; qmean+qsd}.&#10;          compute quantc(1,4) = 1.&#10;          do if (quantile = 1).&#10;            compute quantd(1,4) = 1.&#10;            compute quantc(1,4) = 0.&#10;            compute tmp = q.&#10;            compute tmp(GRADE(q)) = q.&#10;            compute matq = {tmp(trunc(n*.10),1); tmp(trunc(n*.25),1); tmp(trunc(n*.50),1); tmp(trunc(n*0.75),1); tmp(trunc(n*.90),1)}.&#10;          end if.&#10;        end if.&#10;        do if (qdich = 1).&#10;          compute matq = {cmin(q); cmax(q)}.&#10;        end if. &#10;        do if (!qmodval &lt;&gt; 999).&#10;          compute matq = !qmodval.&#10;          compute quantd(1,4) = 0.&#10;          compute quantc(1,4) = 0.&#10;        end if.&#10;        compute modmatv(1,4)=nrow(matq).&#10;        compute modmat((1:nrow(matq)), 4) = matq.&#10;        compute modvnm(1,4)=qname.&#10;        compute modmatp(1,4) = 1.&#10;      end if.&#10;    end if.&#10;    do if (vnames(:,i)=clname).&#10;      compute cld = dat(:,i).&#10;      compute cvname = vnames(:,i).&#10;      compute nvarch(1,i)=1.&#10;      compute clsmtch = 1.&#10;    end if.&#10;    loop j = 1 to ncol(mnames).&#10;      do if (vnames(:,i)=mnames(1,j)).&#10;        compute mmatch = mmatch + 1.&#10;        compute m(:,j)=dat(:,i).&#10;        do if (center = 1 and nvarch(1,i) = 0 and mlist &gt; 0).&#10;          compute meanvec = make(n,1,csum(m(:,j))/n). &#10;          compute m(:,j) = m(:,j)-meanvec.&#10;          compute centvar = {centvar, mnames(1,j)}.&#10;        end if.&#10;        compute nvarch(1,i)=1.&#10;        compute dichm = 1.&#10;        loop jj = 1 to n.&#10;          do if ((m(jj,j) &lt;&gt; cmin(m(:,j))) and (m(jj,j) &lt;&gt; cmax(m(:,j)))).&#10;            compute dichm = 0.&#10;            break.&#10;          end if.&#10;        end loop.&#10;        do if (dichm = 1 and model &gt; 3 and mcheck = 0).&#10;          compute errs= errs+1.&#10;          compute runerrs(errs,1) = 1.&#10;          compute mcheck = 1.&#10;        end if.&#10;        do if ((model &lt;= 3) and (ncol(mnames)=1)).&#10;          compute nmods = nmods + 1.&#10;          compute mmean = csum(m(:,j))/n.&#10;          compute tmp = m(:,j)-(cons*mmean).&#10;          compute msd = sqrt((1/(n-1))*(t(tmp)*tmp)).&#10;          compute mdich = 1.&#10;          loop jj = 1 to n.&#10;            do if ((m(jj,j) &lt;&gt; cmin(m(:,j))) and (m(jj,j) &lt;&gt; cmax(m(:,j)))).&#10;              compute mdich = 0.&#10;              break.&#10;            end if.&#10;          end loop.&#10;          do if (model = 1).&#10;            compute jndich=mdich.&#10;            compute jnmin=cmin(m(:,j)).&#10;            compute jnmax=cmax(m(:,j)).&#10;          end if.&#10;          do if (mdich = 0).&#10;            compute matm = {mmean-msd; mmean; mmean+msd}.&#10;            compute quantc(1,5) = 1.&#10;            do if (quantile = 1).&#10;              compute quantd(1,5) = 1.&#10;              compute quantc(1,5) = 0.&#10;              compute tmp = m(:,j).&#10;              compute tmp(GRADE(m(:,j))) = m(:,j).&#10;              compute matm = {tmp(trunc(n*.10),1); tmp(trunc(n*.25),1); tmp(trunc(n*.50),1); tmp(trunc(n*0.75),1); tmp(trunc(n*.90),1)}.&#10;            end if.&#10;          end if.&#10;          do if (mdich = 1).&#10;            compute matm = {cmin(m); cmax(m)}.&#10;          end if. &#10;          do if (!mmodval &lt;&gt; 999).&#10;            compute matm = !mmodval.&#10;            compute quantd(1,5) = 0.&#10;            compute quantc(1,5) = 0.&#10;          end if.&#10;          compute modmatv(1,5)=nrow(matm).&#10;          compute modmat((1:nrow(matm)), 5) = matm.&#10;          compute modvnm(1,5)=mnames(1,j).&#10;          compute modmatp(1,5) = 1.&#10;        end if.&#10;      end if.&#10;    end loop.&#10;  end loop.&#10;  do if (clname &lt;&gt; &quot;xxx&quot; and clsmtch = 0).&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 23.&#10;  end if.&#10;  do if (clname &lt;&gt; &quot;xxx&quot;).&#10;    do if ((clname = zname) or (clname = vname) or (clname = wname) or (clname = xname) or (clname = yname) or (clname = qname)).&#10;      compute errs = errs+1.&#10;      compute runerrs(errs,1) = 24.&#10;    end if.&#10;  end if.&#10;  do if (wlist = 1 and werr = 0 and wmatch = 0).&#10;    compute werr = 3.&#10;     compute errs = errs+1.&#10;     compute runerrs(errs,1) = 4.&#10;  end if.&#10;  do if (zlist = 1 and zerr = 0 and zmatch = 0).&#10;    compute zerr = 3.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 5.&#10;  end if.&#10;  do if (qlist = 1 and qerr = 0 and qmatch = 0).&#10;    compute qerr = 3.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 6.&#10;  end if.&#10;  do if (vlist = 1 and verr = 0 and vmatch = 0).&#10;    compute verr = 3.&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 7.&#10;  end if.&#10;  do if (yerr = 1).&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 16.&#10;  end if.&#10;  do if (model = 6 and nmeds &lt; 2).&#10;    compute errs = errs+1.&#10;    compute runerrs(errs,1) = 18.&#10;  end if.&#10;  do if (mmatch &lt; ncol(mnames)).&#10;    compute errs=errs+1.&#10;    compute runerrs(errs,1) = 25.&#10;  end if.&#10;end if.&#10;&#10;&#10;  do if (clname &lt;&gt; &quot;xxx&quot;).&#10;    compute cld = design(cld).&#10;    compute cluster = ncol(cld).&#10;    compute cld = cld(:,2:ncol(cld)).&#10;    compute clsdmy = ncol(cld).&#10;    do if (clsdmy &gt; 19).&#10;      compute errs = errs+1.&#10;      compute runerrs(errs,1) = 26.&#10;    end if.&#10;  end if.&#10;&#10;do if (errs = 0).&#10;  do if (rsum(quantd) &gt; 0).&#10;    compute note(notes,1) = 4.&#10;    compute notes = notes+1.&#10;  end if.&#10;  do if (rsum(quantc) &gt; 0).&#10;    compute note(notes,1) = 5.&#10;    compute notes = notes+1.&#10;  end if.&#10;&#10;&#10;  compute dichy = 1.&#10;  loop jj = 1 to n.&#10;    do if ((y(jj,1) &lt;&gt; cmin(y)) and (y(jj,1) &lt;&gt; cmax(y))).&#10;       compute dichy = 0.&#10;       break.&#10;    end if.&#10;  end loop.    &#10;  do if (dichy = 1).&#10;    compute jncrit=xp2*xp2.&#10;  end if.&#10;  compute ncovs = ncol(dat)-rsum(nvarch).&#10;  do if (ncovs &gt; 0).&#10;    compute c = make(n,ncovs,0).&#10;    compute cnames = {&quot;x&quot;}.&#10;    compute j = 1.&#10;    loop i = 1 to ncol(vnames).&#10;      do if (nvarch(1,i)) = 0.&#10;        compute c(:,j) = dat(:,i).&#10;        compute nvarch(1,i)=1.&#10;        compute j=j+1.&#10;        compute cnames = {cnames, vnames(:,i)}.&#10;      end if.&#10;    end loop.&#10;    compute cnames = cnames(1,2:ncol(cnames)).&#10;  end if.&#10;  compute names = {yname, xname, mnames, wname, zname, vname, qname}.&#10;  do if (ncovs &gt; 0).&#10;    compute names = {names, cnames}.&#10;  end if.&#10;  do if (dichy = 1 and effsize = 1).&#10;    compute note(notes,1) = 2.&#10;    compute notes = notes+1.&#10;  end if.&#10;  do if (model &gt; 3 and model &lt; 6). &#10;    compute indeff=make(nmeds,1,0).&#10;    compute indboot=make(boot+1,nmeds,999).&#10;    do if (effsize = 1 and dichy = 0 and ncovs = 0).&#10;      compute rmeff=make(boot+1,nmeds+1,999).&#10;      compute abpseff=make(boot+1,nmeds+1,999).&#10;      compute abcseff=make(boot+1,nmeds+1,999).&#10;      compute pmeff=make(boot+1,nmeds+1,999).&#10;      compute r245 = make(boot+1,1,999).&#10;      compute kappa2 = make(boot+1,1,999).&#10;    end if.&#10;  end if.&#10;  do if (model = 6 and effsize = 1 and dichy = 0 and ncovs=0).&#10;    compute rmeff=make(boot+1,ncol(indboot),999).&#10;    compute abpseff=make(boot+1,ncol(indboot),999).&#10;    compute abcseff=make(boot+1,ncol(indboot),999).&#10;    compute pmeff=make(boot+1,ncol(indboot),999).&#10;  end if.&#10;  do if (nmods &gt; 0).&#10;    compute tmp = 1.&#10;    loop i = 1 to 5.&#10;      do if (modmatp(1,i) = 1).&#10;        compute modmat(:,tmp) = modmat(:,i).&#10;        compute modvnm(1,tmp) = modvnm(1,i).&#10;        compute modmatv(1,tmp) = modmatv(1,i).&#10;        compute tmp=tmp+1.&#10;      end if.&#10;    end loop.&#10;    compute modmat=modmat(:,1:nmods).&#10;    compute modvnm=modvnm(:,1:nmods).&#10;    compute modmatv=modmatv(:,1:nmods).&#10;    loop i = 1 to (ncol(modmatv)-1).&#10;      compute tmp = 1.&#10;      loop j = (i+1) to ncol(modmatv).&#10;        compute tmp = tmp*modmatv(1,j).&#10;      end loop.&#10;      compute modprod(1,i)=tmp.&#10;    end loop.&#10;    compute modvals = make((modmatv(1,1)*modprod(1,1)), nmods,0).&#10;    loop i = 1 to nmods.&#10;      compute strt = 1.&#10;      compute fnsh=0.&#10;      loop if (fnsh &lt; nrow(modvals)).&#10;        loop j = 1 to modmatv(1,i).&#10;          compute tmp=make(modprod(1,i),1,modmat(j,i)).&#10;          compute fnsh = fnsh+nrow(tmp).&#10;          compute modvals(strt:fnsh, i) = tmp.&#10;          compute strt = fnsh+1.&#10;        end loop.&#10;      end loop.&#10;    end loop.&#10;    do if (model = 74).&#10;      compute modvals=matx.&#10;      compute modvnm=xname.&#10;    end if.&#10;    compute vmat = make(8,nrow(modvals),0).&#10;    compute vmat(1,1:nrow(modvals)) = make(1,nrow(modvals),1).&#10;    compute vmat(5,1:nrow(modvals)) = make(1,nrow(modvals),1).&#10;    compute indeff=make(nrow(modvals),1,0).&#10;    do if (model &lt;&gt; 5).&#10;      compute indboot = make(((boot+1)*nmeds), nrow(modvals), -99999999).&#10;      compute indbootp = make(boot+1,nmeds, -99999999).&#10;    end if.&#10;  end if.&#10;  do if (nmods&gt; 0).&#10;    loop i = 1 to ncol(modvals).&#10;      do if (modvnm(1,i)=wname).&#10;        compute wcol = i.&#10;      end if.&#10;      do if (modvnm(1,i)=zname).&#10;        compute zcol = i.&#10;      end if.&#10;      do if (modvnm(1,i)=vname).&#10;        compute vcol = i.&#10;      end if.&#10;      do if (modvnm(1,i)=qname).&#10;        compute qcol = i.&#10;      end if.&#10;    end loop.&#10;  end if.&#10;  do if (dichy = 1).&#10;    compute omx = cmax(y).&#10;    compute omn = cmin(y).&#10;    compute y = (y = omx).&#10;    compute rcd = {omn, 0; omx, 1}.&#10;  end if.&#10;  compute data = {cons,y,m,x}.&#10;  compute datamed = data.&#10;  compute datayed = data.&#10;  compute datanm = {&quot;constant&quot;; yname; t(mnames); xname}.&#10;  compute datanmm = {&quot;constant&quot;; yname; t(mnames); xname}.&#10;  compute datanmy = {&quot;constant&quot;; yname; t(mnames); xname}.&#10;  compute yintkey = {&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;  do if (model &lt; 4 and errs = 0).&#10;    compute yintkey = {yintkey; yintemp(1,intcnt), xname, &quot;   X&quot;, mnames, &quot; &quot;, &quot; &quot;}.&#10;    compute datayed = {datayed, x&amp;*m}.&#10;    compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;    compute intcnt = intcnt+1.&#10;    loop i = 1 to nrow(modvals).&#10;      compute vmat(1,i) = 1.&#10;      compute vmat(2,i) = modvals(i,1).&#10;    end loop.&#10;    compute mmat = make(16,nmeds,1).&#10;  end if.&#10;  do if (model = 2 or model = 3).&#10;    compute int1 = x&amp;*w.&#10;    compute datayed = {datayed, w, int1}.&#10;    compute yintkey = {yintkey; yintemp(1,intcnt), xname, &quot;   X&quot;, wname, &quot; &quot;, &quot; &quot;}.&#10;    compute datanmy = {datanmy; wname; yintemp(1,intcnt)}.&#10;    compute intcnt = intcnt+1.&#10;    loop i = 1 to nrow(modvals).&#10;      compute vmat(2,i) = modvals(i,2).&#10;      compute vmat(3,i) = modvals(i,1).&#10;      compute vmat(4,i) = modvals(i,1)*modvals(i,2).&#10;    end loop.&#10;  end if.&#10;  do if (model = 3).&#10;    compute yintkey = {yintkey; yintemp(1,intcnt), mnames, &quot;   X&quot;, wname, &quot; &quot;, &quot; &quot;}.&#10;    compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;    compute intcnt = intcnt+1.&#10;    compute int1 = w&amp;*m.&#10;    compute int2 = x&amp;*w&amp;*m.&#10;    compute datayed = {datayed, int1, int2}.&#10;    compute yintkey = {yintkey; yintemp(1,intcnt), xname, &quot;   X&quot;, mnames, &quot;   X&quot;, wname}. &#10;    compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;    compute intcnt = intcnt+1.&#10;  end if.&#10;  do if (model = 4 or model = 5).&#10;    compute vmat = make(8,1,1).&#10;  end if.&#10;  compute yintkey2 = yintkey.&#10;  do if (wm = 1).&#10;    compute int1 = x&amp;*w.&#10;    compute datamed = {datamed, w,int1}.&#10;    compute yintkey = {yintkey;  yintemp(1,intcnt), xname, &quot;   X&quot;, wname, &quot; &quot;, &quot; &quot;}.&#10;    compute datanmm = {datanmm; wname; yintemp(1,intcnt)}.&#10;    compute intcnt = intcnt+1.&#10;    loop i = 1 to nrow(modvals).&#10;      compute vmat(2,i) = modvals(i,wcol).&#10;    end loop.&#10;    do if (zm = 1).&#10;      compute int1 = x&amp;*z.&#10;      compute datamed = {datamed, z, int1}.&#10;      compute yintkey = {yintkey;  yintemp(1,intcnt), xname, &quot;   X&quot;, zname, &quot; &quot;, &quot; &quot;}.&#10;      compute datanmm = {datanmm; zname; yintemp(1,intcnt)}.&#10;      compute intcnt = intcnt+1.&#10;      loop i = 1 to nrow(modvals).&#10;        compute vmat(3,i) = modvals(i,zcol).&#10;      end loop.&#10;    end if.  &#10;    do if (wzm = 1).&#10;      compute yintkey = {yintkey; yintemp(1,intcnt), wname, &quot;   X&quot;, zname, &quot; &quot;, &quot; &quot;}.&#10;      compute datanmm = {datanmm; yintemp(1,intcnt)}.&#10;      compute intcnt = intcnt+1.&#10;      compute yintkey = {yintkey; yintemp(1,intcnt), xname, &quot;   X&quot;, wname, &quot;   X&quot;, zname }.&#10;      compute datanmm = {datanmm; yintemp(1,intcnt)}.&#10;      compute intcnt = intcnt+1.&#10;      compute int1 = w&amp;*z.&#10;      compute int2 = x&amp;*w&amp;*z.&#10;      compute datamed = {datamed, int1, int2}.&#10;      loop i = 1 to nrow(modvals).&#10;        compute vmat(4,i) = modvals(i,wcol)*modvals(i,zcol).&#10;      end loop.&#10;    end if.&#10;  end if.&#10;  compute mdatacol=ncol(datamed).&#10;  compute mintkey = yintkey.&#10;  compute yintkey = {&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;  compute medints = intcnt-1.&#10;  do if (vy = 1 or xmy = 1).&#10;    compute mp = 1.&#10;    do if (xmy = 1).&#10;      loop i = 1 to nrow(modvals).&#10;        compute vmat(6,i) = modvals(i,1).&#10;      end loop.&#10;    end if.&#10;    do if (vy = 1).&#10;      compute datayed = {datayed, v}.&#10;      compute datanmy = {datanmy; vname}.&#10;      compute mmods = 1.&#10;      loop i = 1 to nrow(modvals).&#10;        compute vmat(6,i) = modvals(i,vcol).&#10;      end loop.&#10;      do if (qy = 1).&#10;        compute mp = 2.&#10;        compute datayed = {datayed,q}.&#10;        compute datanmy = {datanmy; qname}.&#10;        compute mmods = 2.&#10;        loop i = 1 to nrow(modvals).&#10;          compute vmat(7,i) = modvals(i,qcol).&#10;        end loop.&#10;      end if.&#10;      do if (vqy = 1).&#10;        compute mp = 3.&#10;        compute datayed = {datayed, v&amp;*q}.&#10;        compute mmods = 3.&#10;        loop i = 1 to nrow(modvals).&#10;          compute vmat(8,i) = modvals(i,vcol)*modvals(i,qcol).&#10;        end loop.&#10;      end if.&#10;    end if.&#10;    compute mints = make(n,(nmeds*mp),0).&#10;    loop i = 0 to (nmeds-1).&#10;      do if (i = 0 and vqy = 1).&#10;        compute yintkey = {yintkey; yintemp(1,intcnt), vname, &quot;   X&quot;, qname, &quot; &quot;, &quot; &quot;}.&#10;        compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;        compute intcnt = intcnt+1.&#10;      end if.&#10;      do if (vy = 1).&#10;        compute mints(:,((i*mp)+1))= m(:,(i+1))&amp;*v.&#10;        compute yintkey = {yintkey; yintemp(1,intcnt), mnames(1,(i+1)), &quot;   X&quot;, vname, &quot; &quot;, &quot; &quot;}.&#10;        compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;        compute intcnt = intcnt+1.&#10;      end if.&#10;      do if (xmy = 1).&#10;        compute mints(:,((i*mp)+1))= m(:,(i+1))&amp;*x.&#10;        compute yintkey = {yintkey; yintemp(1,intcnt), mnames(1,(i+1)), &quot;   X&quot;, xname, &quot; &quot;, &quot; &quot;}.&#10;        compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;        compute intcnt = intcnt+1.&#10;      end if.&#10;      do if (qy = 1).&#10;        compute mints(:,((i*mp)+2))=m(:,(i+1))&amp;*q.&#10;        compute yintkey = {yintkey; yintemp(1,intcnt), mnames(1,(i+1)), &quot;   X&quot;, qname, &quot; &quot;, &quot; &quot;}.&#10;        compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;        compute intcnt = intcnt+1.&#10;        do if (vqy = 1).&#10;          compute mints(:,((i*mp)+3))=m(:,(i+1))&amp;*v&amp;*q.&#10;          compute yintkey = {yintkey; yintemp(1,intcnt), mnames(1,(i+1)), &quot;   X&quot;, vname, &quot;   X&quot;, qname}.&#10;          compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;          compute intcnt = intcnt+1.&#10;        end if.&#10;      end if.            &#10;    end loop.&#10;    compute datayed = {datayed, mints}.&#10;  end if.&#10;  compute mp = 1.&#10;  do if (wvmy = 1).&#10;    compute mp = 2.&#10;    loop i = 1 to nrow(modvals).&#10;      compute vmat(8,i) = modvals(i,wcol)*modvals(i,vcol).&#10;    end loop.&#10;  end if.&#10;  compute mints2 = make(n,(nmeds*mp),0).&#10;  do if (wmy = 1).&#10;    loop i = 1 to nrow(modvals).&#10;      compute vmat(7,i) = modvals(i,wcol).&#10;    end loop.&#10;    do if (wy = 0 and model &gt; 3).&#10;      compute datayed = {datayed, w}.&#10;      compute datanmy = {datanmy; wname}.&#10;    end if.&#10;    loop i = 0 to (nmeds-1).&#10;      do if (i = 0 and wvmy = 1).&#10;        compute datayed = {datayed,w&amp;*v}.&#10;        compute yintkey = {yintkey; yintemp(1,intcnt), wname, &quot;   X&quot;, vname, &quot; &quot;, &quot; &quot;}.&#10;        compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;        compute intcnt = intcnt+1.&#10;      end if.&#10;      compute mints2(:,((i*mp)+1))= m(:,(i+1))&amp;*w.&#10;      compute yintkey = {yintkey; yintemp(1,intcnt), mnames(1,(i+1)), &quot;   X&quot;, wname, &quot; &quot;, &quot; &quot;}.&#10;      compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;      compute intcnt = intcnt+1.&#10;      do if (wvmy = 1).&#10;        compute mints2(:,((i*mp)+2))= m(:,(i+1))&amp;*w&amp;*v.&#10;        compute yintkey = {yintkey; yintemp(1,intcnt), mnames(1,(i+1)), &quot;   X&quot;, wname, &quot;   X&quot;, vname}.&#10;        compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;        compute intcnt = intcnt+1.&#10;      end if.&#10;    end loop.&#10;    compute datayed = {datayed, mints2}.&#10;  end if.&#10;  compute mp = 1.&#10;  do if (zmy = 1).&#10;    loop i = 1 to nrow(modvals).&#10;      compute vmat(6,i) = modvals(i,zcol).&#10;    end loop.&#10;    do if (wzmy = 1).&#10;      compute mp = 2.&#10;      loop i = 1 to nrow(modvals).&#10;        compute vmat(8,i) = modvals(i,zcol)&amp;*modvals(i,wcol).&#10;      end loop.&#10;    end if.&#10;  end if.&#10;  do if (zmy = 1).&#10;    compute mints3 = make(n,(nmeds*mp),0).&#10;    do if (zy = 0).&#10;      compute datayed = {datayed, z}.&#10;      compute datanmy = {datanmy; zname}.&#10;    end if.&#10;    loop i = 0 to (nmeds-1).&#10;      do if (i = 0 and wzmy = 1 and wzy = 0).&#10;        compute datayed = {datayed,w&amp;*z}.&#10;        compute yintkey = {yintkey; yintemp(1,intcnt), wname, &quot;   X&quot;, zname, &quot; &quot;, &quot; &quot;}.&#10;        compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;        compute intcnt = intcnt+1.&#10;      end if.&#10;      compute mints3(:,((i*mp)+1))= m(:,(i+1))&amp;*z.&#10;      compute yintkey = {yintkey; yintemp(1,intcnt), mnames(1,(i+1)), &quot;   X&quot;, zname, &quot; &quot;, &quot; &quot;}.&#10;      compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;      compute intcnt = intcnt+1.&#10;      do if (wzmy = 1).&#10;        compute mints3(:,((i*mp)+2))= m(:,(i+1))&amp;*w&amp;*z.&#10;        compute yintkey = {yintkey; yintemp(1,intcnt), mnames(1,(i+1)), &quot;   X&quot;, wname, &quot;   X&quot;, zname}.&#10;        compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;        compute intcnt = intcnt+1.&#10;      end if.&#10;    end loop.&#10;    compute datayed = {datayed, mints3}.&#10;  end if.&#10;  compute decoc = 1.&#10;  compute modmat = make(5,5,999).&#10;  compute modmatv = make(1,5,1).&#10;  compute modmatp = make(1,5,0).&#10;  compute modprod = modmatv.&#10;  do if (wy = 1 and model &gt; 3).&#10;    compute datayed = {datayed, w, x&amp;*w}.&#10;    compute decoc = decoc+1.&#10;    compute deco(decoc,1) = ncol(datayed)-1.&#10;    compute modmatv(1,1)=nrow(matw).&#10;    compute modmat((1:nrow(matw)), 1) = matw.&#10;    compute modvnm2(1,1)=wname.&#10;    compute modmatp(1,1) = 1.&#10;    compute yintkey = {yintkey; yintemp(1,intcnt), xname, &quot;   X&quot;, wname, &quot; &quot;, &quot; &quot;}.&#10;    compute datanmy = {datanmy; wname; yintemp(1,intcnt)}.&#10;    compute intcnt = intcnt+1.&#10;  end if.&#10;  do if (zy = 1).&#10;    compute datayed = {datayed,z,x&amp;*z}.&#10;    compute decoc = decoc+1.&#10;    compute deco(decoc,1) = ncol(datayed)-1.&#10;    compute modmatv(1,2)=nrow(matz).&#10;    compute modmat((1:nrow(matz)), 2) = matz.&#10;    compute modvnm2(1,2)=zname.&#10;    compute modmatp(1,2) = 1.&#10;    compute yintkey = {yintkey; yintemp(1,intcnt), xname, &quot;   X&quot;, zname, &quot; &quot;, &quot; &quot;}.&#10;    compute datanmy = {datanmy; zname; yintemp(1,intcnt)}.&#10;    compute intcnt = intcnt+1.&#10;  end if.&#10;  do if (wzy = 1).&#10;    compute datayed = {datayed,w&amp;*z,x&amp;*w&amp;*z}.&#10;    compute decoc = decoc+1.&#10;    compute deco(decoc,1) = ncol(datayed)-1.&#10;    compute yintkey = {yintkey; yintemp(1,intcnt), wname, &quot;   X&quot;, zname, &quot; &quot;, &quot; &quot;}.&#10;    compute datanmy = {datanmy;yintemp(1,intcnt)}.&#10;    compute intcnt = intcnt+1.&#10;    compute yintkey = {yintkey; yintemp(1,intcnt), xname, &quot;   X&quot;, wname, &quot;   X&quot;, zname }.&#10;    compute datanmy = {datanmy;yintemp(1,intcnt)}.&#10;    compute intcnt = intcnt+1.&#10;  end if.&#10;  do if (vxy = 1).&#10;    compute datayed = {datayed, x&amp;*v}.&#10;    compute decoc = decoc+1.&#10;    compute deco(decoc,1) = ncol(datayed)-1.&#10;    compute modmatv(1,3)=nrow(matv).&#10;    compute modmat((1:nrow(matv)), 3) = matv.&#10;    compute modvnm2(1,3)=vname.&#10;    compute modmatp(1,3) = 1.&#10;    compute yintkey = {yintkey; yintemp(1,intcnt), xname, &quot;   X&quot;, vname, &quot; &quot;, &quot; &quot;}.&#10;    compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;    compute intcnt = intcnt+1.&#10;    do if (qxy = 1).&#10;      compute datayed = {datayed, x&amp;*q}.&#10;      compute decoc = decoc+1.&#10;      compute deco(decoc,1) = ncol(datayed)-1.&#10;      compute modmatv(1,4)=nrow(matq).&#10;      compute modmat((1:nrow(matq)), 4) = matq.&#10;      compute modvnm2(1,4)=qname.&#10;      compute modmatp(1,4) = 1.&#10;      compute yintkey = {yintkey; yintemp(1,intcnt), xname, &quot;   X&quot;, qname, &quot; &quot;, &quot; &quot;}.&#10;      compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;      compute intcnt = intcnt+1.&#10;      do if (vqxy = 1).&#10;        compute datayed = {datayed, x&amp;*v&amp;*q}.&#10;        compute decoc = decoc+1.&#10;        compute deco(decoc,1) = ncol(datayed)-1.&#10;        compute yintkey = {yintkey; yintemp(1,intcnt), xname, &quot;   X&quot;, vname, &quot;X&quot;, qname}.&#10;        compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;        compute intcnt = intcnt+1.&#10;      end if.&#10;    end if.&#10;  end if.&#10;  do if (wvxy = 1).&#10;    compute datayed = {datayed, x&amp;*w&amp;*v}.&#10;    compute decoc = decoc+1.&#10;    compute deco(decoc,1) = ncol(datayed)-1.&#10;    compute yintkey = {yintkey; yintemp(1,intcnt), xname, &quot;   X&quot;, wname, &quot;X&quot;, vname}.&#10;    compute datanmy = {datanmy; yintemp(1,intcnt)}.&#10;    compute intcnt = intcnt+1.&#10;  end if.&#10;  compute modvalsd = 0.&#10;  compute ttt = rsum(modmatp).&#10;  do if (rsum(modmatp) &gt; 0).&#10;    compute tmp = 1.&#10;    loop i = 1 to 5.&#10;      do if (modmatp(1,i) = 1).&#10;        compute modmat(:,tmp) = modmat(:,i).&#10;        compute modvnm2(1,tmp) = modvnm2(1,i).&#10;        compute modmatv(1,tmp) = modmatv(1,i).&#10;        compute tmp=tmp+1.&#10;      end if.&#10;    end loop.&#10;    compute modmat=modmat(:,1:ttt).&#10;    compute modvnm2=modvnm2(:,1:ttt).&#10;    compute modmatv=modmatv(:,1:ttt).&#10;    loop i = 1 to (ncol(modmatv)-1).&#10;      compute tmp = 1.&#10;      loop j = (i+1) to ncol(modmatv).&#10;        compute tmp = tmp*modmatv(1,j).&#10;      end loop.&#10;      compute modprod(1,i)=tmp.&#10;    end loop.&#10;    compute modvalsd = make((modmatv(1,1)*modprod(1,1)), ttt,0).&#10;    loop i = 1 to ttt.&#10;      compute strt = 1.&#10;      compute fnsh=0.&#10;      loop if (fnsh &lt; nrow(modvalsd)).&#10;        loop j = 1 to modmatv(1,i).&#10;          compute tmp=make(modprod(1,i),1,modmat(j,i)).&#10;          compute fnsh = fnsh+nrow(tmp).&#10;          compute modvalsd(strt:fnsh, i) = tmp.&#10;          compute strt = fnsh+1.&#10;        end loop.&#10;      end loop.&#10;    end loop.&#10;  end if.&#10;  do if (ttt &gt; 0).&#10;    loop i = 1 to ncol(modvalsd).&#10;      do if (modvnm2(1,i)=wname).&#10;        compute wcol = i.&#10;      end if.&#10;      do if (modvnm2(1,i)=zname).&#10;        compute zcol = i.&#10;      end if.&#10;      do if (modvnm2(1,i)=vname).&#10;        compute vcol = i.&#10;      end if.&#10;      do if (modvnm2(1,i)=qname).&#10;        compute qcol = i.&#10;      end if.&#10;    end loop.&#10;    compute directv = make(nrow(modvalsd),1,1).&#10;    do if (wy = 1).&#10;      compute directv ={directv, modvalsd(:,wcol)}.&#10;    end if.&#10;    do if (zy = 1).&#10;      compute directv ={directv, modvalsd(:,zcol)}.&#10;    end if.&#10;    do if (wzy = 1).&#10;      compute directv ={directv, (modvalsd(:,wcol)&amp;*modvalsd(:,zcol))}.&#10;    end if.&#10;    do if (vxy = 1).&#10;      compute directv ={directv, modvalsd(:,vcol)}.&#10;    end if.&#10;    do if (qxy = 1).&#10;      compute directv ={directv, modvalsd(:,qcol)}.&#10;    end if.&#10;    do if (vqxy = 1).&#10;      compute directv ={directv, (modvalsd(:,vcol)&amp;*modvalsd(:,qcol))}.&#10;    end if.&#10;    do if (wvxy = 1).&#10;      compute directv ={directv, (modvalsd(:,vcol)&amp;*modvalsd(:,wcol))}.&#10;    end if.&#10;  end if.&#10;  compute ydatacol=ncol(datayed).&#10;  do if (ncovs &gt; 0).&#10;    do if (covmy &lt;&gt; 2).&#10;      compute datamed = {datamed,c}.&#10;    end if.&#10;    do if (covmy &lt;&gt; 1).&#10;      compute datayed = {datayed,c}.&#10;    end if.&#10;    compute covmeans = csum(c)/n.&#10;  end if.&#10;  do if (cluster &gt; 0).&#10;    compute datamed = {datamed,cld}.&#10;    compute datayed = {datayed, cld}.&#10;    compute cldmeans = csum(cld)/n.&#10;  end if.&#10;  compute mst = 3.&#10;  compute mnd = mst+nmeds-1.&#10;  compute ydatacol=ncol(datayed).&#10;  compute mdatacol=ncol(datamed).&#10;  do if (ncovs &gt; 0).&#10;    compute datanmy = {datanmy; t(cnames)}.&#10;    do if (model &gt; 3).&#10;      compute datanmm = {datanmm; t(cnames)}.&#10;    end if.&#10;  end if.&#10;  compute datanmy = {&quot;constant&quot;; datanmy(3:nrow(datanmy),1)}.&#10;  do if (model &gt; 3).&#10;    compute datanmm = {&quot;constant&quot;; datanmm(3:nrow(datanmm),1)}.&#10;  end if.&#10;  compute amm = make(2,1,0).&#10;  compute abmm = make(2,1,0).&#10;  compute mnv = csum(datayed(:,2)/n).&#10;  compute mnv = make(n,1,mnv).&#10;  compute ssty = csum((datayed(:,2)-mnv)&amp;**2).&#10;  compute sigma = (n*sscp(datayed))-(t(csum(datayed))*(csum(datayed))).&#10;  compute sigma = sigma/(n*(n-1)).&#10;  compute stddevy = sqrt(sigma(2,2)).&#10;  compute stddevx = sqrt(sigma((3+nmeds),(3+nmeds))).&#10;  compute r2xy = (sigma(2,(3+nmeds))/(stddevy*stddevx))&amp;**2.&#10;  compute r2my = (sigma(2,3)/(stddevy*sqrt(sigma(3,3))))&amp;**2.&#10;  compute ctot = sigma(2,(3+nmeds))/sigma((3+nmeds),(3+nmeds)).&#10;  do if (model = 4 and nmeds = 1 and cluster = 0 and ncovs = 0).&#10;    compute kappaa = sigma(2,3)*sigma(2,4).&#10;    compute kappab = sqrt((sigma(3,3)*sigma(2,2))-(sigma(2,3)*sigma(2,3))).&#10;    compute kappac = sqrt((sigma(4,4)*sigma(2,2))-(sigma(2,4)*sigma(2,4))).&#10;    compute kappad = sigma(4,4)*sigma(2,2).&#10;    compute kappae = sqrt((sigma(4,4)*sigma(3,3))-(sigma(3,4)*sigma(3,4))).&#10;    compute amm(1,1) = (kappaa+(kappab*kappac))/kappad.&#10;    compute amm(2,1) = (kappaa-(kappab*kappac))/kappad.&#10;    do if (sigma(3,4) &lt; 0).&#10;      compute amma =cmin(amm).&#10;    end if.&#10;    do if (sigma(3,4) &gt; 0).&#10;      compute amma = cmax(amm).&#10;    end if.&#10;    compute abmm(1,1)=-amma*(kappac/kappae).&#10;    compute abmm(2,1)=amma*(kappac/kappae).&#10;  end if.&#10;  compute datatm = datamed.&#10;  compute dataty = datayed.&#10;  compute mdlnms2 = {!quote(!model); yname; xname}.&#10;  compute mdlnms = {&quot;Model =&quot;; &quot;    Y =&quot;; &quot;    X =&quot; }.&#10;  loop i = 1 to ncol(mnames).&#10;    compute mdlnms2 = {mdlnms2; mnames(1,i)}.&#10;    do if (i = 1 and ncol(mnames) = 1).&#10;      compute mdlnms = {mdlnms; &quot;    M =&quot;}.&#10;    else.&#10;      compute mdlnms = {mdlnms; mlab(i,1)}.&#10;    end if.&#10;  end loop.&#10;  do if (wname &lt;&gt; &quot;xxx&quot;).&#10;    compute mdlnms2 = {mdlnms2; wname}.&#10;    compute mdlnms = {mdlnms; &quot;    W = &quot;}.&#10;  end if.&#10;  do if (zname &lt;&gt; &quot;xxx&quot;).&#10;    compute mdlnms2 = {mdlnms2; zname}.&#10;    compute mdlnms = {mdlnms; &quot;    Z = &quot;}.&#10;  end if.&#10;  do if (vname &lt;&gt; &quot;xxx&quot;).&#10;    compute mdlnms2 = {mdlnms2; vname}.&#10;    compute mdlnms = {mdlnms; &quot;    V = &quot;}.&#10;  end if.&#10;  do if (qname &lt;&gt; &quot;xxx&quot;).&#10;    compute mdlnms2 = {mdlnms2; qname}.&#10;    compute mdlnms = {mdlnms; &quot;    Q = &quot;}.&#10;  end if.&#10;&#10;  do if (jn = 1 and model = 1 and jndich = 1).&#10;    compute note(notes,1) = 8.&#10;    compute notes = notes + 1.&#10;  end if.&#10;  do if (jn = 1 and model = 3 and jndich = 1).&#10;    compute note(notes,1) = 8.&#10;    compute notes = notes + 1.&#10;  end if.&#10;  do if (effsize = 1 and ncovs &lt;&gt; 0).&#10;    compute note(notes,1) = 10.&#10;    compute notes = notes + 1.&#10;  end if.&#10;&#10;&#10;&#10;  print/title = &quot;************* PROCESS Procedure for SPSS Beta Release 130612 *************&quot;.&#10;  print/title = &quot;        Written by Andrew F. Hayes, Ph.D.   http://www.afhayes.com&quot;.&#10;  print mdlnms2/title = &quot;**************************************************************************&quot;/rnames = mdlnms/format = a8.&#10;  do if (ncovs &gt; 0).&#10;    print cnames/title = &quot;Statistical Controls:&quot;/rlabels = &quot;CONTROL=&quot;/format a8.&#10;  end if.&#10;  print n/title = &quot;Sample size&quot;/format F10.0.&#10;    do if (cluster &gt; 0).&#10;      print cluster/rnames = cvname/title = &quot;Clustering Variable and Number of Clusters&quot;.&#10;    end if.&#10;    loop bt = 1 to (boot+1).&#10;      do if (bt &gt; 1).&#10;        loop.&#10;          compute v=trunc(uniform(n,1)*n)+1.&#10;          compute datayed = dataty(v,:).&#10;          do if (model &gt; 3).&#10;            compute datamed = datatm(v,:). &#10;          end if.&#10;          compute sigma = (n*sscp(datayed))-(t(csum(datayed))*(csum(datayed))).&#10;          compute sigma = sigma/(n*(n-1)).&#10;          compute temp=diag(sigma).&#10;          compute rk = (csum(temp(2:nrow(temp)) = 0) = 0) .&#10;          /* do if (rk = 1) */.&#10;            /* compute rk = (rank(sigma)=(ncol(sigma)-1)) */.&#10;          /* end if */.&#10;          compute bad = bad+(1-rk).&#10;          compute false = 1.&#10;        end loop if (rk = 1).&#10;        /* compute sigma = (t(datayed)*(ident(n)-(1/n)*cons*t(cons))*datayed)*(1/(n-1)) */.&#10;        compute stddevy = sqrt(sigma(2,2)).&#10;        compute stddevx = sqrt(sigma((3+nmeds),(3+nmeds))).&#10;        compute ctot = sigma(2,(3+nmeds))/sigma((3+nmeds),(3+nmeds)).&#10;        do if (model = 4 and nmeds = 1 and ncovs = 0 and cluster = 0).&#10;          compute r2xy = (sigma(2,4)/(stddevy*stddevx))&amp;**2.&#10;          compute r2my = (sigma(2,3)/(stddevy*sqrt(sigma(3,3))))&amp;**2.&#10;          compute sstot = sigma(2,2)*(n-1).&#10;          compute kappaa = sigma(2,3)*sigma(2,4).&#10;          compute kappab = sqrt((sigma(3,3)*sigma(2,2))-(sigma(2,3)*sigma(2,3))).&#10;          compute kappac = sqrt((sigma(4,4)*sigma(2,2))-(sigma(2,4)*sigma(2,4))).&#10;          compute kappad = sigma(4,4)*sigma(2,2).&#10;          compute kappae = sqrt((sigma(4,4)*sigma(3,3))-(sigma(3,4)*sigma(3,4))).&#10;          compute amm(1,1) = (kappaa+(kappab*kappac))/kappad.&#10;          compute amm(2,1) = (kappaa-(kappab*kappac))/kappad.&#10;          do if (sigma(3,4) &lt; 0).&#10;            compute amma =cmin(amm).&#10;          end if.&#10;          do if (sigma(3,4) &gt; 0).&#10;            compute amma = cmax(amm).&#10;          end if.&#10;          compute abmm(1,1)=-amma*(kappac/kappae).&#10;          compute abmm(2,1)=amma*(kappac/kappae).&#10;        end if.&#10;      end if.&#10;      /* estimate model of mediator(s) */.&#10;      do if (model &gt; 3).&#10;        loop im = 1 to nmeds.&#10;          compute xm={cons, datamed(:,(mnd+1):mdatacol)}.&#10;          compute xmnm = {&quot;constant&quot;; datanmm((2+nmeds):nrow(datanmm),1)}.&#10;          compute invXtX = inv(t(xm)*xm).&#10;          compute coeff =invXtX*t(xm)*datamed(:,(2+im)).&#10;          do if (model = 6).&#10;            do if (im = 1).&#10;              compute xm={cons, datamed(:,(mnd+1):mdatacol)}.&#10;              compute invXtX = inv(t(xm)*xm).&#10;              compute coeff =invXtX*t(xm)*datamed(:,(2+im)).&#10;            end if.&#10;            do if (im &gt; 1).&#10;              compute xm={cons, datamed(:,3:(im+1)), datamed(:,(mnd+1):mdatacol)}.&#10;              compute xmnm = {&quot;constant&quot;; datanmm(2:im,1); datanmm((mnd):nrow(datanmm),1)}.&#10;              compute invXtX = inv(t(xm)*xm).&#10;              compute coeff =invXtX*t(xm)*datamed(:,(2+im)).&#10;              compute mmpaths((im+1),(2:im))=t(coeff(2:im,1)).&#10;            end if.&#10;          end if.&#10;          do if (bt = 1).&#10;            compute resid=datamed(:,(2+im))-xm*coeff.&#10;            compute sse =cssq(resid).&#10;            compute mse = sse/(n-ncol(xm)).&#10;            compute mnv = csum(data(:,(2+im))/n).&#10;            compute mnv = make(n,1,mnv).&#10;            compute sstm = csum((data(:,(2+im))-mnv)&amp;**2).&#10;            compute k3 = nrow(coeff).&#10;            do if (hc3 = 1).&#10;              compute h = xm(:,1).&#10;              loop i3=1 to n.&#10;                compute h(i3,1)= xm(i3,:)*invXtX*t(xm(i3,:)). &#10;              end loop.&#10;              loop i3=1 to k3.&#10;                compute xm(:,i3) = (resid(:,ncol(resid))&amp;/(1-h))&amp;*xm(:,i3).&#10;              end loop.&#10;            end if.&#10;            do if (hc3 &lt;&gt; 1).&#10;              loop i3=1 to k3.&#10;                compute xm(:,i3) = sqrt(mse)&amp;*xm(:,i3).&#10;              end loop.&#10;            end if.&#10;            compute lmat = ident(nrow(coeff)).&#10;            compute lmat = lmat(:,2:ncol(lmat)).&#10;            compute hccov=invXtX*t(xm)*xm*invXtX.&#10;            compute dfnum = nrow(coeff)-1.&#10;            compute dfden = n-dfnum-1.&#10;            compute fratio = (t(t(lmat)*coeff)*inv(t(lmat)*hccov*lmat)*((t(lmat)*coeff)))/dfnum).&#10;            compute coeff = coeff(1:(nrow(coeff)-clsdmy)).&#10;            compute standerr = sqrt(diag(invXtX*t(xm)*xm*invXtX)).&#10;            compute standerr = standerr(1:(nrow(standerr)-clsdmy)).&#10;            compute tratio = coeff&amp;/standerr.&#10;            compute p = 2*(1-tcdf(abs(tratio), (n-ncol(xm)))).&#10;            compute temp=(n-ncol(xm)).&#10;            compute xd = abs(xp2).&#10;            compute temp =  (temp* (exp((temp-(5/6))*((xd/(temp-(2/3)+(.11/temp)))*(xd/(temp-(2/3)+(.11/temp)))))-1)).&#10;            compute temp1 = coeff-sqrt(abs(temp))*standerr.&#10;            compute temp2 = coeff+sqrt(abs(temp))*standerr.&#10;            compute op = {coeff, standerr, tratio, p, temp1, temp2}.&#10;            compute sobel(im,1) = coeff(2,1).&#10;            compute sobel(im,2)=standerr(2,1).&#10;            compute temp = mnames(1,im).&#10;            compute r2full = 1-(sse/sstm). &#10;            /* compute fratio = (dfden*r2full)/((1-r2full)*dfnum) */.&#10;            compute pfr = 1-fcdf(fratio,dfnum,dfden).&#10;            compute summ = {sqrt(r2full), r2full, Fratio, dfnum, dfden, pfr}.&#10;            do if (detail = 1).&#10;              print temp/title = &quot;**************************************************************************&quot;/rlabels = &quot;Outcome:&quot;/format = A8.&#10;              /* do if (cluster = 0) */.&#10;              print summ/title = &quot;Model Summary&quot;/clabels &quot;R&quot;, &quot;R-sq&quot;, &quot;F&quot;, &quot;df1&quot;, &quot;df2&quot;, &quot;p&quot;/format = F10.4.&#10;              /* end if */.&#10;              do if (coeffci = 0).&#10;                compute op = op(:,1:(ncol(op)-2)).&#10;              end if.&#10;              print op/title = &quot;Model&quot;/rnames = xmnm/clabels = &quot;coeff&quot;, &quot;se&quot;, &quot;t&quot;, &quot;p&quot;, &quot;LLCI&quot;, &quot;ULCI&quot;/format = F10.4.&#10;              do if (nmods &gt; 0 and nrow(mintkey) &gt; 1).&#10;                print mintkey/title = &quot;Interactions:&quot;/format = A8.&#10;              end if.&#10;            end if.&#10;          end if.&#10;          /* now we create the matrices for indirect effects */.&#10;          compute ymat(1,im) = coeff(2,1).&#10;          do if (wm = 1).&#10;            compute ymat(2,im) = coeff(4,1).&#10;            do if (zm = 1).&#10;              compute ymat(3,im) = coeff(6,1).&#10;              do if (wzm = 1).&#10;                compute ymat(4, im) = coeff(8,1).&#10;              end if.&#10;            end if.&#10;          end if.&#10;          do if (model = 6).&#10;            compute mmpaths((im+1),1)=coeff((im+1),1).&#10;          end if.&#10;        end loop.&#10;      end if.&#10;      /* estimate model of outcome */.&#10;      loop totlp = 1 to (1+(toteff*(bt = 1))).&#10;        do if (toteff = 1 and totlp =2).&#10;          compute xy = {cons,datayed(:,(3+nmeds):ydatacol)}.&#10;        else.&#10;          compute xy={cons, datayed(:,3:ydatacol)}.&#10;        end if.&#10;        do if (dichy = 1).&#10;          compute pt2 = make(nrow(datayed(:,2)),1,(csum(datayed(:,2))/n)).&#10;          compute LL3 = datayed(:,2)&amp;*ln(pt2)+(1-datayed(:,2))&amp;*ln(1-pt2).&#10;          compute LL3 = -2*csum(LL3).&#10;          compute pt1 = make(n,1,0.5). &#10;          compute bt1 = make(ncol(xy),1,0). &#10;          compute LL1 = 0.&#10;          compute xy22=xy.&#10;          loop jjj = 1 to iterate.&#10;            loop ijk=1 to ncol(xy).&#10;              compute xy22(:,ijk)=xy(:,ijk)&amp;*pt1&amp;*(1-pt1).&#10;            end loop.&#10;            compute coeff = bt1+inv(t(xy22)*xy)*t(xy)*(datayed(:,2)-pt1).&#10;            compute pt1 = 1/(1+exp(-(xy*coeff))).&#10;            compute itprob = csum((pt1 &lt; .00000000000001) or (pt1 &gt; .99999999999999)).&#10;            do if (itprob = 0).&#10;              compute LL = datayed(:,2)&amp;*ln(pt1)+(1-datayed(:,2))&amp;*ln(1-pt1).&#10;              compute LL2 = -2*csum(ll).&#10;            end if.&#10;            do if (abs(LL1-LL2) &lt; converge).&#10;              break.&#10;            end if.&#10;            compute bt1 = coeff.&#10;            compute LL1 = LL2.&#10;          end loop.&#10;          do if (jjj &gt;= iterate and iterr = 0).&#10;            compute errs = errs+1.&#10;            compute runerrs(errs,1) = 22.&#10;            computer iterr = 1.&#10;          end if.&#10;          loop ijk=1 to ncol(xy).&#10;            compute xy22(:,ijk)=xy(:,ijk)&amp;*pt1&amp;*(1-pt1).&#10;          end loop.&#10;          compute covmat = inv(t(xy22)*xy).&#10;          release xy22.&#10;        end if.&#10;        do if (dichy = 0).&#10;          compute invXtX = inv(t(xy)*xy).&#10;          compute coeff =invXtX*t(xy)*datayed(:,2). &#10;          do if (nmeds = 1 and ncovs = 0 and cluster = 0 and model = 4 and bt &gt; 1).&#10;            compute resid=datayed(:,2)-xy*coeff.&#10;            compute sse = cssq(resid).&#10;            compute r2full = 1-(sse/sstot).&#10;          end if.&#10;          do if (bt =1).&#10;            compute resid=data(:,2)-xy*coeff.&#10;            compute k3 = nrow(coeff).&#10;            compute sse = cssq(resid).&#10;            compute mse = sse/(n-ncol(xy)).   &#10;            do if (hc3 = 1).&#10;              compute h = xy(:,1).&#10;              loop i3=1 to n.&#10;                compute h(i3,1)= xy(i3,:)*invXtX*t(xy(i3,:)). &#10;              end loop.&#10;              loop i3=1 to k3.&#10;                compute xy(:,i3) = (resid(:,ncol(resid))&amp;/(1-h))&amp;*xy(:,i3).&#10;              end loop.&#10;            end if.&#10;            do if (hc3 &lt;&gt; 1).&#10;              loop i3=1 to k3.&#10;                compute xy(:,i3) = sqrt(mse)&amp;*xy(:,i3).&#10;              end loop.&#10;            end if.&#10;            compute covmat = (invXtX*t(xy)*xy*invXtX).&#10;          end if.&#10;        end if.&#10;        do if (bt = 1).&#10;          do if (model = 2).&#10;            compute xy2={cons, datayed(:,3:ydatacol)}.&#10;            compute temp = ncol(xy2).&#10;            do if (temp &gt; 6).&#10;              compute xy3=xy2(:,7:temp)}.&#10;            end if.&#10;            compute xy2={xy2(:,1:3), xy2(:,5)}.&#10;            do if (temp &gt; 6).&#10;              compute xy2={xy2, xy3}.&#10;              release xy3.&#10;            end if.&#10;            compute invXtX = inv(t(xy2)*xy2).&#10;            compute coeff2 =invXtX*t(xy2)*datayed(:,2). &#10;            compute ssem2=cssq(datayed(:,2)-xy2*coeff2).&#10;            release xy2.&#10;          end if.&#10;          compute standerr = sqrt(diag(covmat)).&#10;          compute standerr=standerr(1:(nrow(standerr)-clsdmy),1).&#10;          compute coeffplt = coeff.&#10;          compute lmat = ident(nrow(coeff)).&#10;          compute lmat = lmat(:,2:ncol(lmat)).&#10;          compute dfnum = nrow(coeff)-1.&#10;          compute dfden = n-dfnum-1.&#10;          compute fratio = (t(t(lmat)*coeff)*inv(t(lmat)*covmat*lmat)*((t(lmat)*coeff)))/dfnum).&#10;          compute coeff=coeff(1:(nrow(coeff)-clsdmy),1).&#10;          compute bbbb=coeff(2,1).&#10;          do if totlp = 1.&#10;            compute deco(1,1)=2+nmeds.&#10;            compute deco = deco(1:decoc,1).&#10;            compute covdirt = make((nrow(covmat)-clsdmy),(ncol(covmat)-clsdmy),0).&#10;            compute covdirt = covmat(deco,:).&#10;            compute covdir = make(nrow(covdirt),ncol(covdirt),0).&#10;            compute covdir = covdirt(:,t(deco)).&#10;            compute deco=coeff(deco,1).&#10;            do if (ttt &gt; 0).&#10;              compute sedir = sqrt(diag(directv*covdir*t(directv))).&#10;              compute directv = directv*deco.&#10;            end if.&#10;            compute sobel(:,3)=coeff(2:(1+nmeds),1).&#10;            compute sobel(:,4) = standerr(2:(1+nmeds),1).&#10;            compute sobel2 = sobel&amp;*sobel.&#10;            do if (varorder &lt;&gt; 2).&#10;              compute sobel(:,2) = sqrt(sobel2(:,1)&amp;*sobel2(:,4)+sobel2(:,3)&amp;*sobel2(:,2)).&#10;            end if.&#10;            do if (varorder = 2).&#10;              compute sobel(:,2) = sqrt(sobel2(:,1)&amp;*sobel2(:,4)+sobel2(:,3)&amp;*sobel2(:,2)+sobel2(:,2)&amp;*sobel2(:,4)).&#10;            end if.&#10;            compute sobel(:,1) = sobel(:,1)&amp;*sobel(:,3).&#10;            compute sobel(:,3) = sobel(:,1)&amp;/sobel(:,2).&#10;            compute sobel(:,4) = 2*(1-cdfnorm(abs(sobel(:,3)))).&#10;          end if.&#10;          do if (dichy = 0).&#10;            compute tratio = coeff&amp;/standerr.&#10;            compute p = 2*(1-tcdf(abs(tratio), (n-ncol(xy)))).&#10;            compute cnms = {&quot;coeff&quot;, &quot;se&quot;, &quot;t&quot;, &quot;p&quot;, &quot;LLCI&quot;, &quot;ULCI&quot;}.&#10;            compute op = {coeff, standerr, tratio, p}.&#10;          end if.&#10;          do if (dichy = 1).&#10;            compute tratio = (coeff&amp;/standerr).&#10;            compute p = 2*(1-cdfnorm(abs(tratio))).&#10;            compute wald = tratio&amp;*tratio.&#10;            compute cnms = {&quot;coeff&quot;, &quot;se&quot;, &quot;Z&quot;, &quot;p&quot;, &quot;LLCI&quot;, &quot;ULCI&quot;}.&#10;            compute temp=coeff-abs(xp2)*standerr.&#10;            compute op = {coeff, standerr, tratio, p, temp}.&#10;            compute temp=coeff+abs(xp2)*standerr.&#10;            compute op = {op, temp}.&#10;          end if.&#10;          do if (detail = 1).&#10;            do if (totlp = 2).&#10;              print yname/title = &quot;************************** TOTAL EFFECT MODEL ****************************&quot;/rlabels = &quot;Outcome:&quot;/format = A8.&#10;            end if.&#10;            do if (totlp &lt;&gt; 2).&#10;              print yname/title = &quot;**************************************************************************&quot;/rlabels = &quot;Outcome:&quot;/format = A8.&#10;            end if.&#10;          end if.&#10;          do if (dichy = 1 and bt = 1 and totlp = 1).&#10;            compute nmsd = {yname, &quot;Analysis&quot;}.&#10;            print rcd/title = &quot;Coding of binary DV for analysis:&quot;/cnames = nmsd/format = F9.2.&#10;          end if.&#10;          do if (dichy = 0).&#10;            compute r2full = 1-(sse/ssty).&#10;            /* compute fratio = (dfden*r2full)/((1-r2full)*dfnum) */.&#10;            compute pfr = 1-fcdf(fratio,dfnum,dfden).&#10;            compute jndf=dfden.&#10;            compute xd = abs(xp2).&#10;            compute jncrit =  (dfden* (exp((dfden-(5/6))*((xd/(dfden-(2/3)+(.11/dfden)))*(xd/(dfden-(2/3)+(.11/dfden)))))-1)).&#10;            compute summ = {sqrt(r2full), r2full, fratio, dfnum, dfden, pfr}. &#10;            compute temp1=coeff-sqrt(jncrit)*standerr.&#10;            compute temp2=coeff+sqrt(jncrit)*standerr.&#10;            compute op = {coeff, standerr, tratio, p, temp1, temp2}.&#10;            do if (detail = 1).&#10;              /* do if (cluster = 0) */.&#10;              print summ/title = &quot;Model Summary&quot;/clabels = &quot;R&quot;, &quot;R-sq&quot;, &quot;F&quot;, &quot;df1&quot;, &quot;df2&quot;, &quot;p&quot;/format = F10.4.&#10;              /* end if */.&#10;            end if.&#10;          end if.&#10;          do if (dichy = 1).&#10;            compute LLdiff = LL3-LL2.&#10;            compute mcF = LLdiff/LL3.&#10;            compute cox = 1-exp(-LLdiff/n).&#10;            compute nagel = cox/(1-exp(-(LL3)/n)).&#10;            compute pf = {LL2, LLdiff, mcF, cox, nagel, n}.&#10;            do if (detail = 1).&#10;              print pf/title = &quot;Logistic Regression Summary&quot;/clabels = &quot;-2LL&quot; &quot;Model LL&quot; &quot;McFadden&quot; &quot;CoxSnell&quot; &quot;Nagelkrk&quot; &quot;n&quot;/format F10.4.&#10;            end if.&#10;          end if.&#10;          do if (totlp = 2).&#10;            compute datanmy={&quot;constant&quot;; datanmy((nmeds+2):nrow(datanmy),1)}.&#10;          end if.&#10;          do if (detail = 1).&#10;            do if (coeffci = 0).&#10;              compute op = op(:,1:(ncol(op)-2)).&#10;            end if.&#10;            print op/title = &quot;Model&quot;/rnames = datanmy/cnames = cnms/format = F10.4.&#10;          end if.&#10;          do if (ttt = 0 and totlp = 1).&#10;            compute deco = op((nmeds+2),:).&#10;          end if.&#10;          do if (ttt = 0 and totlp = 2).&#10;            compute decotot = op(2,:).&#10;          end if.&#10;          do if (nmods &gt; 0 and model &gt; 4 and detail = 1 and nrow(yintkey) &gt; 1)).&#10;            print yintkey/title = &quot;Interactions:&quot;/format = A8.&#10;          end if.&#10;          do if (nmods &gt; 0 and model &lt; 4 and detail = 1).&#10;            print yintkey2/title = &quot;Interactions:&quot;/format = A8.&#10;            do if ((model = 1 or model = 2) and dichy = 0 and hc3 = 0).&#10;              compute temp={((op(4,3)**2)*(1-r2full))/dfden, op(4,3)**2, 1, dfden, op(4,4)}.&#10;              compute rnms=yintkey2(2,1).&#10;              do if (model = 2).&#10;                 compute temp={temp;((op(6,3)**2)*(1-r2full))/dfden, op(6,3)**2, 1, dfden, op(6,4)}.&#10;                 compute frat2=(dfden*(r2full-(1-(ssem2/ssty))))/(2*(1-r2full)).&#10;                 compute temp={temp;(r2full-(1-(ssem2/ssty))),frat2,2,dfden,1-fcdf(frat2,2,dfden)}.&#10;                 compute rnms={rnms; yintkey2(3,1);&quot;Both&quot;}.&#10;              end if.&#10;              print temp/title = &quot;R-square increase due to interaction(s):&quot;/rnames=rnms/clabels = &quot;R2-chng&quot;, &quot;F&quot;, &quot;df1&quot;, &quot;df2&quot;, &quot;p&quot;/format = F10.4.&#10;            end if.&#10;            do if (model = 3 and dichy = 0 and hc3 = 0).&#10;              compute temp={((op(8,3)**2)*(1-r2full))/dfden, op(8,3)**2, dfden, op(8,4)}.&#10;              compute rnms=yintkey2(5,1).&#10;              print temp/title = &quot;R-square increase due to three-way interaction:&quot;/rnames=rnms/clabels = &quot;R2-chng&quot;, &quot;F(1,df2)&quot;, &quot;df2&quot;, &quot;p&quot;/format = F10.4.&#10;            end if.&#10;          end if.&#10;        end if.&#10;        do if (model = 6 and totlp = 1).&#10;          compute mmpaths(nrow(mmpaths),1)=coeff(nrow(mmpaths),1).&#10;          compute mmpaths(nrow(mmpaths),(2:(nmeds+1)))=t(coeff(2:(nmeds+1),1)).&#10;        end if.&#10;        do if (totlp = 1).&#10;          loop im = 1 to nmeds.&#10;          do if (model &lt; 4).&#10;            compute ymat(1,im) = coeff(3,1).&#10;            compute ymat(2,im) = coeff(4,1).&#10;            compute cmat(1,im) = covmat(3,3).&#10;            compute cmat(2,im) = covmat(4,4).&#10;            compute cmat(5,im) = covmat(3,4).&#10;            compute jnb1=coeff(3,1).&#10;            compute jnb3=coeff(4,1).&#10;            compute jnsb1=covmat(3,3).&#10;            compute jnsb3=covmat(4,4).&#10;            compute jnsb1b3=covmat(3,4).&#10;            do if (model = 2 or model = 3).&#10;              compute ymat(3,im) = coeff(6,1).&#10;              compute cmat(3,im) = covmat(6,6).&#10;              compute cmat(6,im) = covmat(3,6).&#10;              compute cmat(8,im) = covmat(4,6).&#10;            end if.&#10;            do if (model = 3).&#10;              compute ymat(4,im) = coeff(8,1).&#10;              compute cmat(4,im) = covmat(8,8).&#10;              compute cmat(7,im) = covmat(3,8).&#10;              compute cmat(9,im) = covmat(4,8).&#10;              compute cmat(10,im) = covmat(6,8).&#10;              compute jnb1=coeff(4,1).&#10;              compute jnb3=coeff(8,1).&#10;              compute jnsb1=covmat(4,4).&#10;              compute jnsb3=covmat(8,8).&#10;              compute jnsb1b3=covmat(4,8).&#10;            end if. &#10;          end if.&#10;          do if (model &gt; 3).&#10;            compute ymat(5,im) = coeff((1+im),1).&#10;          end if.&#10;          do if (xmy = 1).&#10;            compute ymat(6,im) = coeff((2+nmeds+im),1).&#10;          end if.&#10;          do if (vy = 1).&#10;            compute ymat(6,im) = coeff((3+nmeds+im),1).&#10;          end if.&#10;          do if (qy = 1 and vy = 1).&#10;            compute ymat(6,im) = coeff((5+nmeds+((im-1)*2)),1).&#10;            compute ymat(7,im) = coeff((6+nmeds+((im-1)*2)),1).&#10;          end if.&#10;          do if (vqy = 1).&#10;            compute ymat(6,im) = coeff((6+nmeds+((im-1)*3)),1).&#10;            compute ymat(7,im) = coeff((7+nmeds+((im-1)*3)),1).&#10;            compute ymat(8,im) = coeff((8+nmeds+((im-1)*3)),1).&#10;          end if.&#10;          do if (wmy = 1).&#10;            compute ymat(7,im) =  coeff((3+nmeds+im-wy),1).&#10;          end if.&#10;          do if (wmy = 1 and vy = 1).&#10;            compute ymat(7,im) =coeff((4+(nmeds*2)+im-wy),1).&#10;          end if.&#10;          do if (wmy = 1 and vy = 1 and wvmy = 1).&#10;            compute ymat(7,im) = coeff((6+(nmeds*2)+((im-1)*2)-wy),1).&#10;            compute ymat(8,im) = coeff((7+(nmeds*2)+((im-1)*2)-wy),1).&#10;          end if.&#10;          do if (wmy = 1 and zmy = 1 and wzmy = 1).&#10;            compute ymat(6,im) = coeff((6-(wzy*3)+(nmeds*2)+((im-1)*2)),1).&#10;            compute ymat(7,im) = coeff((3-wzy+im+nmeds),1).&#10;            compute ymat(8,im) = coeff((7-(wzy*3)+(nmeds*2)+((im-1)*2)),1).&#10;          end if.&#10;          do if (nmods &gt; 0 and model &lt;&gt; 5).&#10;            loop indlp = 1 to nrow(modvals).   &#10;              compute indeff(indlp,1) = csum(ymat(1:4,im)&amp;*vmat(1:4,indlp)).&#10;              do if (model &gt; 6).&#10;                compute indeff(indlp,1) = csum(ymat(1:4,im)&amp;*vmat(1:4,indlp))*csum(ymat(5:8,im)&amp;*vmat(5:8,indlp)).&#10;              end if.&#10;            end loop.&#10;            compute indboot((bt+(im-1)*(boot+1)),:)=t(indeff).&#10;            do if (model = 8).&#10;              compute indbootp(bt,im)=ymat(2,im)*ymat(5,im).&#10;            end if.&#10;            do if (model = 12).&#10;              compute indbootp(bt,im)=ymat(4,im)*ymat(5,im).&#10;            end if.&#10;          end if.&#10;          do if (model = 4 or model = 5).&#10;            compute indboot(bt,im)=csum(ymat(1:4,im)&amp;*vmat(1:4,1))*csum(ymat(5:8,im)&amp;*vmat(5:8,1)).&#10;            do if (effsize = 1 and dichy = 0 and ncovs = 0).&#10;              do if (ctot = 0).&#10;                compute ctot=.00000000000001.&#10;              end if.&#10;              compute pmeff(bt,(im+1))=indboot(bt,im)/ctot.&#10;              compute rmeff(bt,(im+1))=indboot(bt,im)/coeff((2+nmeds),1).&#10;              compute abpseff(bt,(im+1))=indboot(bt,im)/stddevy.&#10;              compute abcseff(bt,(im+1))=abpseff(bt,(im+1))*stddevx.&#10;              do if (nmeds = 1 and ncovs = 0 and cluster = 0 and model = 4).&#10;                compute r245(bt,1) = r2my-(r2full-r2xy).&#10;                /* compute temp = indboot(bt,im) */.&#10;                compute abmmr = 1.&#10;                do if (indboot(bt,im) &lt; 0).&#10;                  compute abmmr = cmin(abmm).&#10;                end if.&#10;                do if (indboot(bt,im) &gt; 0).&#10;                  compute abmmr = cmax(abmm).&#10;                end if.&#10;                compute kappa2(bt,1)=indboot(bt,im)/abmmr.&#10;                compute tmp = indboot(bt,im)/abmmr.             &#10;              end if.&#10;            end if.&#10;          end if.&#10;          do if (model = 6). &#10;            do if (nmeds = 2).&#10;              compute indboot(bt,1)=mmpaths(2,1)*mmpaths(4,2).&#10;              compute indboot(bt,2)=mmpaths(2,1)*mmpaths(3,2)*mmpaths(4,3).&#10;              compute indboot(bt,3)=mmpaths(3,1)*mmpaths(4,3).&#10;            end if.&#10;            do if (nmeds = 3).&#10;              compute indboot(bt,1) = mmpaths(2,1)*mmpaths(5,2). &#10;              compute indboot(bt,2) = mmpaths(2,1)*mmpaths(3,2)*mmpaths(5,3).&#10;              compute indboot(bt,3) = mmpaths(2,1)*mmpaths(4,2)*mmpaths(5,4).&#10;              compute indboot(bt,4) = mmpaths(2,1)*mmpaths(3,2)*mmpaths(4,3)*mmpaths(5,4).&#10;              compute indboot(bt,5) = mmpaths(3,1)*mmpaths(5,3).&#10;              compute indboot(bt,6) = mmpaths(3,1)*mmpaths(4,3)*mmpaths(5,4).&#10;              compute indboot(bt,7) = mmpaths(4,1)*mmpaths(5,4).&#10;            end if.&#10;            do if (nmeds = 4).&#10;              compute indboot(bt,1)=mmpaths(2,1)*mmpaths(6,2).&#10;              compute indboot(bt,2)=mmpaths(2,1)*mmpaths(3,2)*mmpaths(6,3).&#10;              compute indboot(bt,3)=mmpaths(2,1)*mmpaths(4,2)*mmpaths(6,4).&#10;              compute indboot(bt,4)=mmpaths(2,1)*mmpaths(5,2)*mmpaths(6,5).&#10;              compute indboot(bt,5)=mmpaths(2,1)*mmpaths(3,2)*mmpaths(4,3)*mmpaths(6,4).&#10;              compute indboot(bt,6)=mmpaths(2,1)*mmpaths(3,2)*mmpaths(5,3)*mmpaths(6,5).&#10;              compute indboot(bt,7)=mmpaths(2,1)*mmpaths(4,2)*mmpaths(5,4)*mmpaths(6,5).&#10;              compute indboot(bt,8)=mmpaths(2,1)*mmpaths(3,2)*mmpaths(4,3)*mmpaths(5,4)*mmpaths(6,5).&#10;              compute indboot(bt,9)=mmpaths(3,1)*mmpaths(6,3).&#10;              compute indboot(bt,10)=mmpaths(3,1)*mmpaths(4,3)*mmpaths(6,4).&#10;              compute indboot(bt,11) =mmpaths(3,1)*mmpaths(5,3)*mmpaths(6,5). &#10;              compute indboot(bt,12) = mmpaths(3,1)*mmpaths(4,3)*mmpaths(5,4)*mmpaths(6,5).&#10;              compute indboot(bt,13) = mmpaths(4,1)*mmpaths(6,4).&#10;              compute indboot(bt,14) = mmpaths(4,1)*mmpaths(5,4)*mmpaths(6,5).&#10;              compute indboot(bt,15) = mmpaths(5,1)*mmpaths(6,5).&#10;            end if.&#10;            do if (effsize = 1 and dichy = 0 and ncovs = 0).             &#10;              do if (ctot = 0).&#10;                compute ctot=.00000000000001.&#10;              end if.&#10;              compute pmeff(bt,:)=indboot(bt,:)/ctot.&#10;              compute rmeff(bt,:) = indboot(bt,:)/mmpaths(nrow(mmpaths),1).&#10;              compute abpseff(bt,:)=indboot(bt,:)/stddevy.&#10;              compute abcseff(bt,:)=stddevx*indboot(bt,:)/stddevy.&#10;              do if (nmeds = 1 and ncovs = 0 and cluster = 0 and model = 4).&#10;                compute r245(bt,:) = r2my-(r2full-r2xy).&#10;              end if.&#10;            end if.&#10;          end if.&#10;        end loop.&#10;      end if.&#10;    end loop.  /* end of outcome variable loop */.&#10;  end loop.    /* end of bootstrap loop */.&#10;  release datayed, dat, datamed, data, y, x, m, datatm, dataty, mints2, cons, mnv, tmp.&#10;&#10;  do if (ttt = 0 and model &gt; 3).&#10;    do if (toteff = 0).&#10;      print/title = &quot;******************** DIRECT AND INDIRECT EFFECTS *************************&quot;.&#10;    else.&#10;      print/title = &quot;***************** TOTAL, DIRECT, AND INDIRECT EFFECTS ********************&quot;.&#10;    end if.&#10;    do if (model &lt; 74).&#10;      do if (dichy = 0).&#10;        do if (toteff = 1).&#10;          print decotot/title = &quot;Total effect of X on Y&quot;/clabels = &quot;Effect&quot;, &quot;SE&quot;, &quot;t&quot;, &quot;p&quot;, &quot;LLCI&quot;, &quot;ULCI&quot;/format = F10.4.&#10;        end if.&#10;        print deco/title = &quot;Direct effect of X on Y&quot;/clabels = &quot;Effect&quot;, &quot;SE&quot;, &quot;t&quot;, &quot;p&quot;, &quot;LLCI&quot;, &quot;ULCI&quot;/format = F10.4.&#10;      else.&#10;        do if (toteff = 1).&#10;          print decotot/title = &quot;Total effect of X on Y&quot;/clabels = &quot;Effect&quot;, &quot;SE&quot;, &quot;Z&quot;, &quot;p&quot;, &quot;LLCI&quot;, &quot;ULCI&quot;/format = F10.4.&#10;        end if.&#10;        print deco/title = &quot;Direct effect of X on Y&quot;/clabels = &quot;Effect&quot;, &quot;SE&quot;, &quot;Z&quot;, &quot;p&quot;, &quot;LLCI&quot;, &quot;ULCI&quot; /format = F10.4.&#10;      end if.&#10;    end if.&#10;  end if.&#10;  do if (ttt &gt; 0).&#10;    print/title = &quot;******************** DIRECT AND INDIRECT EFFECTS *************************&quot;.&#10;    compute clbs = {modvnm2, &quot;Effect&quot;, &quot;SE&quot;, &quot;t&quot;, &quot;p&quot;, &quot;LLCI&quot;, &quot;ULCI&quot;}.&#10;    compute tratio = (directv&amp;/sedir).&#10;    compute p = 2*(1-tcdf(abs(tratio), (n-ncol(xy)))).&#10;    compute outp = {modvalsd, directv, sedir, tratio, p}.&#10;    do if (dichy = 0).&#10;      compute temp1=directv-sqrt(jncrit)*sedir.&#10;      compute temp2=directv+sqrt(jncrit)*sedir.&#10;      compute outp = {outp, temp1, temp2}.&#10;    end if.&#10;    do if (dichy = 1).&#10;      compute p = 2*(1-cdfnorm(abs(tratio))).&#10;      compute temp = directv-abs(xp2)*sedir.&#10;      compute outp = {outp, temp}.&#10;      compute temp = directv+abs(xp2)*sedir.&#10;      compute outp = {outp, temp}.&#10;      compute clbs = {modvnm2, &quot;Effect&quot;, &quot;SE&quot;, &quot;Z&quot;, &quot;p&quot;, &quot;LLCI&quot;, &quot;ULCI&quot;}.&#10;    end if.&#10;    do if (coeffci = 0).&#10;      compute outp = outp(:,1:(ncol(outp)-2)).&#10;    end if.&#10;    print outp/title = &quot;Conditional direct effect(s) of X on Y at values of the moderator(s)&quot;/format = F10.4/cnames = clbs.&#10;  end if.&#10;  do if (nmods &gt; 0 and model &lt;&gt; 5).&#10;    do if (model &lt; 4).&#10;      print/title = &quot;*************************************************************************&quot;.&#10;      compute zmat(1,1) = 1.&#10;      compute cfse = make(nrow(modvals),1,0).&#10;      loop #m = 1 to nrow(modvals).&#10;        do if (model = 1).&#10;          compute zmat(2,1)=modvals(#m,1)**2.&#10;          compute zmat(5,1)=2*modvals(#m,1).&#10;        end if.&#10;        do if (model = 2 or model = 3).&#10;          compute zmat(2,1)=modvals(#m,2)**2.&#10;          compute zmat(3,1)=modvals(#m,1)**2.&#10;          compute zmat(4,1)=(modvals(#m,1)**2)*(modvals(#m,2)**2).&#10;          compute zmat(5,1)=2*modvals(#m,2).&#10;          compute zmat(6,1)=2*modvals(#m,1).&#10;          compute zmat(7,1)=2*modvals(#m,1)*modvals(#m,2).&#10;          compute zmat(8,1)=2*modvals(#m,1)*modvals(#m,2).&#10;          compute zmat(9,1)=2*modvals(#m,1)*(modvals(#m,2)**2).&#10;          compute zmat(10,1)=2*(modvals(#m,1)**2)*modvals(#m,2).&#10;        end if.&#10;        compute cfse(#m,1)=sqrt(csum(zmat&amp;*cmat)).&#10;      end loop.   &#10;    end if.&#10;    do if (nmods &gt; 0).&#10;      compute clbs = {modvnm, &quot;Effect&quot;}.&#10;      loop im = 1 to nmeds.&#10;        compute obs = t(indboot(1+(im-1)*(boot+1),:)).&#10;        compute outp = {modvals, obs}.&#10;        do if (model &lt; 4).&#10;          compute tstat = obs&amp;/cfse.&#10;          do if (dichy = 0).&#10;            compute pval = 2*(1-tcdf(abs(tstat), (n-ncol(xy)))).&#10;            compute temp=obs-sqrt(jncrit)*cfse.&#10;            compute outp = {outp, cfse, tstat, pval, temp}.&#10;            compute temp=obs+sqrt(jncrit)*cfse.&#10;            compute outp = {outp, temp}.&#10;            compute clbs = {clbs, &quot;se&quot;, &quot;t&quot;, &quot;p&quot;, &quot;LLCI&quot;, &quot;ULCI&quot;}.&#10;            compute jnclbs=clbs.&#10;&#9;         end if.&#10;          do if (dichy = 1).&#10;            compute pval = 2*(1-cdfnorm(abs(tstat))).&#10;            compute temp = obs-abs(xp2)*cfse.&#10;            compute outp = {outp, cfse, tstat, pval, temp}.&#10;            compte temp = obs+abs(xp2)*cfse.&#10;            compute outp = {outp, temp}.&#10;            compute clbs = {clbs, &quot;se&quot;, &quot;Z&quot;, &quot;p&quot;, &quot;LLCI&quot;, &quot;ULCI&quot;}.&#10;            compute jnclbs=clbs.&#10;          end if.&#10;        end if.&#10;        do if (boot &gt; 0).&#10;          compute ones = make(boot,1,1).&#10;          compute estmte=indboot((1+(im-1)*(boot+1)),:).&#10;          compute indboot2 = indboot((2+(im-1)*(boot+1)):(1+(im-1)*(boot+1)+boot),:).&#10;          compute mnind = t(csum(indboot2)/boot).&#10;          compute stdind=t(sqrt((cssq(indboot2)-((csum(indboot2)&amp;**2)/boot))/(boot-1))).&#10;          /* here is the sorting algorithm */.&#10;          compute llci=make(1,ncol(indboot2),-999).&#10;          compute ulci=make(1,ncol(indboot2),-999).&#10;          loop #e = 1 to ncol(indboot2).&#10;             bcboot databcbt = indboot2(:,#e)/estmte=(estmte(1,#e)*bconoff)+(9999*(1-bconoff)).&#10;             compute llci(1,#e)=llcit.&#10;             compute ulci(1,#e)=ulcit.&#10;             do if (badlo = 1 and llcit &lt;&gt; priorlo).&#10;               compute badend={badend, llcit}.&#10;               compute priorlo = llcit.&#10;             end if.&#10;             do if (badhi = 1 and ulcit &lt;&gt; priorhi).&#10;               compute badend={badend, ulcit}.&#10;               compute priorhi = ulcit.&#10;             end if.&#10;          end loop.&#10;          compute outp = {modvals, obs, stdind, t(llci), t(ulci)}.&#10;          compute clbs = {modvnm, &quot;Effect&quot;, &quot;Boot SE&quot;, &quot;BootLLCI&quot;, &quot;BootULCI&quot;}.&#10;        end if.&#10;        compute mtemp = mnames(1, im).&#10;        compute rlbs = make(nrow(modvals),1,mnames(1,im)).&#10;        do if (model &lt; 4).&#10;          do if (coeffci = 0).&#10;            compute outp = outp(:,1:(ncol(outp)-2)).&#10;          end if.&#10;          print outp/title = &quot;Conditional effect of X on Y at values of the moderator(s)&quot;/cnames = clbs/format = F10.4.&#10;        end if.&#10;        do if (model &gt; 5).&#10;          do if (im = 1).&#10;            print/title = &quot;Conditional indirect effect(s) of X on Y at values of the moderator(s)&quot;.&#10;          end if.&#10;          print outp/title = &quot;Mediator&quot;/rnames = rlbs/cnames = clbs/format = F10.4.&#10;        end if.&#10;      end loop.&#10;      loop i = 1 to notes.&#10;      do if (note(i,1) = 4).&#10;        print/title = &quot;Values for quantitative moderators are 10th, 25th, 50th, 75th, and 90th percentiles&quot;.&#10;      end if.&#10;      do if (note(i,1) = 5).&#10;        print/title = &quot;Values for quantitative moderators are the mean and plus/minus one SD from mean&quot;.&#10;      end if.&#10;      end loop.&#10;      do if (model = 3).&#10;        compute jnvals=make(nrow(matw),7,0).&#10;        compute jnvals(:,1)=matw.&#10;                compute jnvals(:,2)=jnb1+jnb3*jnvals(:,1).&#10;                compute jnvals(:,3)=sqrt(jnsb1+2*jnvals(:,1)*jnsb1b3+(jnvals(:,1)&amp;*jnvals(:,1))*jnsb3).&#10;                compute jnvals(:,4)=jnvals(:,2)&amp;/jnvals(:,3).&#10;                do if (dichy = 0).&#10;                  compute jnvals(:,5)=2*(1-tcdf(abs(jnvals(:,4)), jndf)).&#10;                end if.&#10;                do if (dichy = 1).&#10;                  compute jnvals(:,5)=2*(1-cdfnorm(abs(jnvals(:,4)))).&#10;                end if.&#10;                compute jnvals(:,6)=jnvals(:,2)-sqrt(jncrit)&amp;*jnvals(:,3).&#10;                compute jnvals(:,7)=jnvals(:,2)+sqrt(jncrit)&amp;*jnvals(:,3).&#10;               compute clbs={clbs(:,1),clbs(:,3:ncol(clbs))}.&#10;               do if (coeffci = 0).&#10;                 compute jnvals =jnvals(:,1:(ncol(jnvals)-2)).&#10;              end if.&#10;              print jnvals/title = &quot;Conditional effect of X*M interaction at values of W&quot;/cnames =clbs/format = F10.4.&#10;      end if.&#10;      do if (jn = 1 and (model = 1 or model = 3) and jndich = 0).&#10;        compute ajn =(jncrit*jnsb3)-(jnb3*jnb3).&#10;        compute bjn = 2*((jncrit*jnsb1b3)-(jnb1*jnb3)).&#10;        compute cjn = (jncrit*jnsb1)-(jnb1*jnb1).&#10;        compute radarg = (bjn*bjn)-(4*ajn*cjn).&#10;        compute den = 2*ajn.&#10;        compute nrts = 0.&#10;        do if (radarg &gt;= 0 and den &lt;&gt; 0).&#10;          compute x21 = (-bjn+sqrt(radarg))/den.&#10;          compute x22 = (-bjn-sqrt(radarg))/den.&#10;          compute roots = 0.&#10;          do if (x21 &gt;= jnmin and x21 &lt;= jnmax).&#10;            compute nrts = 1.&#10;            compute roots = {roots; x21}.&#10;          end if.&#10;          do if (x22 &gt;= jnmin and x22 &lt;= jnmax).&#10;            compute nrts = nrts + 1.&#10;            compute roots = {roots; x22}.&#10;          end if.&#10;          print/title = &quot;********************* JOHNSON-NEYMAN TECHNIQUE **************************&quot;.&#10;          do if (nrts &gt; 0).                           &#10;            compute roots = roots(2:nrow(roots),1).&#10;            print roots/title = &quot;Moderator value(s) defining Johnson-Neyman significance region(s)&quot;/format F10.4.&#10;            compute jnvals=make((21+nrts),7,0).&#10;            loop i= 0 to 20.&#10;              compute jnvals((i+1),1)=jnmin+(i*((jnmax-jnmin)/20)).&#10;            end loop.&#10;            loop i = 1 to nrts.&#10;              loop j = 2 to nrow(jnvals).&#10;                do if ((roots(i,1) &gt; jnvals((j-1),1)) and (roots(i,1) &lt; jnvals(j,1))).&#10;                  compute jnvals((j+1):(21+i),1)=jnvals(j:(20+i),1).&#10;                  compute jnvals(j,1)=roots(i,1).&#10;                end if.&#10;              end loop.&#10;            end loop. &#10;            loop i = 1 to nrow(jnvals).&#10;                compute jnvals(i,2)=jnb1+jnb3*jnvals(i,1).&#10;                compute jnvals(i,3)=sqrt(jnsb1+2*jnvals(i,1)*jnsb1b3+(jnvals(i,1)*jnvals(i,1))*jnsb3).&#10;                compute jnvals(i,4)=jnvals(i,2)/jnvals(i,3).&#10;                do if (dichy = 0).&#10;                  compute jnvals(i,5)=2*(1-tcdf(abs(jnvals(i,4)), jndf)).&#10;                end if.&#10;                do if (dichy = 1).&#10;                  compute jnvals(i,5)=2*(1-cdfnorm(abs(jnvals(i,4)))).&#10;                end if.&#10;                compute jnvals(i,6)=jnvals(i,2)-sqrt(jncrit)*jnvals(i,3).&#10;                compute jnvals(i,7)=jnvals(i,2)+sqrt(jncrit)*jnvals(i,3).&#10;            end loop. &#10;            do if (model = 1).&#10;              print jnvals/title = &quot;Conditional effect of X on Y at values of the moderator (M)&quot;/cnames =jnclbs/format = F10.4.&#10;            end if.&#10;            do if (model = 3).&#10;              compute jnclbs={jnclbs(:,1),jnclbs(:,3:ncol(jnclbs))}.&#10;              print jnvals/title = &quot;Conditional effect of X*M on Y at values of the moderator (W)&quot;/cnames =jnclbs/format = F10.4.&#10;            end if.&#10;          end if.&#10;          do if (nrts = 0).&#10;            print/title = &quot;There are no regions of significance for the focal predictor within the observed range of the moderator&quot;.&#10;          end if.&#10;        else.&#10;           print/title = &quot;There are no regions of significance for the focal predictor within the observed range of the moderator&quot;.&#10;        end if.&#10;      end if.&#10;&#10;&#10;&#10;    end if.&#10;    /* print data for plotting */.&#10;    do if (model &lt; 4 and plot = 1).&#10;      compute dataplot = make((nrow(modvals)*nrow(matx)),(ncol(modvals)+1),0).&#10;      compute tmp = 1.&#10;      loop i = 1 to nrow(modvals).&#10;        loop j = 1 to nrow(matx).&#10;          compute dataplot(tmp,:)={matx(j,1), modvals(i,:)}.&#10;          compute tmp=tmp+1.&#10;        end loop.&#10;      end loop.&#10;      compute dataplot = {dataplot, make(nrow(dataplot),(1+dichy),0)}.&#10;      compute dataplo2 = make(nrow(dataplot),1,1).&#10;      do if (model = 1).&#10;        compute dataplo2 = {dataplo2, dataplot(:,2), dataplot(:,1), (dataplot(:,1)&amp;*dataplot(:,2))}.&#10;      end if.&#10;      do if (model = 2 or model = 3).&#10;        compute dataplo2 = {dataplo2, dataplot(:,3), dataplot(:,1),  (dataplot(:,1)&amp;*dataplot(:,3)), dataplot(:,2), (dataplot(:,1)&amp;*dataplot(:,2))}.&#10;        do if (model = 3).&#10;          compute dataplo2 = {dataplo2, (dataplot(:,2)&amp;*dataplot(:,3)), (dataplot(:,1)&amp;*dataplot(:,2)&amp;*dataplot(:,3))}.&#10;        end if.&#10;      end if.&#10;      loop i = 1 to nrow(dataplot).&#10;        compute tmp=dataplo2(i,:).&#10;        do if (ncovs &gt; 0).&#10;          compute tmp = {tmp, covmeans}.&#10;        end if.&#10;        do if (cluster &gt; 0).&#10;          compute tmp = {tmp, cldmeans}.&#10;        end if.&#10;        compute dataplot(i,(ncol(dataplot)-(dichy)))=tmp*coeffplt.&#10;        do if (dichy = 1).&#10;          compute dataplot(i,(ncol(dataplot)))=exp(tmp*coeffplt)/(1+exp(tmp*coeffplt)).&#10;        end if.&#10;      end loop.&#10;      compute clbs = {xname, modvnm, &quot;yhat&quot;}.&#10;      do if (dichy = 1).&#10;        compute clbs = {xname, modvnm, &quot;ln(odds)&quot;, &quot;prob&quot;}.&#10;      end if.&#10;      print/title = &quot;**************************************************************************&quot;.&#10;      print dataplot/title = &quot;Data for visualizing conditional effect of X of Y&quot;/cnames = clbs/format = F10.4.&#10;      do if (ncovs &gt; 0).&#10;         print/title = &quot;Estimates in this table are based on setting covariates to their sample means&quot;.&#10;      end if.&#10;    end if.&#10;  end if.&#10;  do if (model = 8 or model = 12).&#10;    compute obsprod = t(indbootp(1,:)).&#10;    print/title = &quot;**************************************************************************&quot;.&#10;    print/title = &quot;Indirect effect of highest order interaction&quot;.&#10;    do if (boot &gt; 0).&#10;      compute ones = make(boot,1,1).&#10;      compute estmte=indbootp(1,:).&#10;      compute indbootp = indbootp(2:(boot+1),:).&#10;      compute mnindp = t(csum(indbootp)/boot).&#10;      compute stdindp=t(sqrt((cssq(indbootp)-((csum(indbootp)&amp;**2)/boot))/(boot-1))).&#10;      compute llcip=make(1,ncol(indbootp),-999).&#10;      compute ulcip=make(1,ncol(indbootp),-999).&#10;      loop #e = 1 to ncol(indbootp).&#10;        bcboot databcbt = indbootp(:,#e)/estmte=(estmte(1,#e)*bconoff)+(9999*(1-bconoff)).&#10;        compute llcip(1,#e)=llcit.&#10;        compute ulcip(1,#e)=ulcit.&#10;        do if (badlo = 1 and llcit &lt;&gt; priorlo).&#10;          compute badend={badend, llcit}.&#10;          compute priorlo = llcit.&#10;        end if.&#10;        do if (badhi = 1 and ulcit &lt;&gt; priorhi).&#10;          compute badend={badend, ulcit}.&#10;          compute priorhi = ulcit.&#10;        end if.&#10;      end loop.&#10;      compute outp = {obsprod, stdindp, t(llcip), t(ulcip)}.&#10;      compute clbs = {&quot;Effect&quot;, &quot;SE(Boot)&quot;, &quot;BootLLCI&quot;, &quot;BootULCI&quot;}.&#10;      print outp/title = &quot;Mediator&quot;/cnames = clbs/rnames = mnames/format = F10.4.&#10;    end if.&#10;    do if (boot = 0).&#10;      print obsprod/title = &quot;Mediator&quot;/clabels = &quot;Effect&quot;/rnames = mnames/format = F10.4.&#10;    end if.&#10;  end if.&#10;  compute conmake=0.&#10;  compute concols=0.&#10;  do if ((model &gt; 3 and model &lt; 7) and (contrast = 1) and nmods = 0 and nmeds &gt; 1 ).&#10;    compute concols = ((ncol(indboot)*(ncol(indboot)-1))/2).&#10;    compute indcon=make(nrow(indboot),concols,-999).&#10;    compute conkey = {&quot;  &quot;, &quot;  &quot;, &quot;  &quot;}.&#10;    compute temp=1.&#10;    compute conmake=1.&#10;    loop i = 1 to (ncol(indboot)-1).&#10;      loop j = (i+1) to (ncol(indboot)).&#10;        compute indcon(:,temp)=indboot(:,i)-indboot(:,j).&#10;        do if (model &lt;&gt; 6).&#10;          compute conkey={conkey; mnames(1,i), &quot;minus&quot;, mnames(1,j)}.&#10;        end if.&#10;        do if (model = 6).&#10;          compute conkey={conkey; indlbl2(i,1), &quot;minus&quot;, indlbl2(j,1)}.&#10;        end if.&#10;        compute temp=temp+1.&#10;      end loop.&#10;    end loop.&#10;  end if.&#10;  do if (model = 4 or model = 5).&#10;    compute clbs = {&quot;Effect&quot;}.&#10;    compute rlbs = {&quot;TOTAL&quot;; t(mnames)}.&#10;    compute obs = t(indboot(1,:)).&#10;    compute obs = {csum(obs); obs}.&#10;    do if (conmake = 1).&#10;      compute obs={obs; t(indcon(1,:))}.&#10;      compute rlbs = {rlbs; cntname(1:ncol(indcon),1)}.&#10;    end if.&#10;    compute outp = obs.&#10;    compute outp2=outp.&#10;    do if (effsize = 1 and dichy = 0 and ncovs = 0).&#10;      compute pmeff(:,1)=rsum(pmeff(:,2:ncol(pmeff))).&#10;      compute rmeff(:,1)=rsum(rmeff(:,2:ncol(rmeff))).&#10;      compute abpseff(:,1)=rsum(abpseff(:,2:ncol(abpseff))).&#10;      compute abcseff(:,1)=rsum(abcseff(:,2:ncol(abcseff))).&#10;      compute eff = {pmeff, rmeff, abpseff, abcseff}.&#10;      do if (nmeds = 1 and ncovs = 0 and cluster = 0 and model = 4).&#10;        compute eff = {eff, r245, kappa2}.&#10;        compute r245obs = {r245(1,1);r245(1,1)}.&#10;        compute kappa2ob = kappa2(1,1).&#10;      end if.&#10;      compute pmobs = t(pmeff(1,1:(nmeds+1))).&#10;      compute rmobs = t(rmeff(1,1:(nmeds+1))).&#10;      compute psobs = t(abpseff(1,1:(nmeds+1))).&#10;      compute csobs = t(abcseff(1,1:(nmeds+1))).&#10;      do if (contrast = 0).&#10;         compute outp2 = {obs, psobs, csobs, pmobs, rmobs}.&#10;      end if.&#10;      do if (contrast = 1).&#10;         compute obs2=obs(1:nrow(psobs),:).&#10;         compute outp2 = {obs2, psobs, csobs, pmobs, rmobs}.&#10;      end if.&#10;      compute clbs = {&quot;ab&quot;, &quot;ab_ps&quot;, &quot;ab_cs&quot;, &quot;ab/c&quot;, &quot;ab/c'&quot;}.&#10;      do if (nmeds = 1 and ncovs = 0 and cluster = 0 and model = 4).&#10;        compute outp2 = {outp2, r245obs, (obs/abmmr)}.&#10;        compute clbs = {clbs, &quot;R-sq_med&quot;, &quot;kappa2&quot;}.&#10;      end if.&#10;    end if.&#10;    do if (boot = 0).&#10;      do if (nmeds = 1).&#10;        compute outp2 = outp2(2,:).&#10;        compute rlbs = rlbs(2,1).&#10;      end if.&#10;      print outp2/title = &quot;Indirect effect(s) of X on Y&quot;/rnames = rlbs/cnames = clbs/format = F10.4.&#10;      do if (contrast = 1 and effsize = 1 and nmeds &gt; 1).&#10;        compute outp2=t(indcon(1,:)).&#10;        compute rlbs2 = cntname(1:ncol(indcon),1).&#10;        print outp2/title = &quot;Contrast(s) between indirect effects&quot;/rnames = rlbs2/cnames=clbs/format = F10.4.&#10;      end if.&#10;    end if.&#10;    do if (boot &gt; 0).&#10;      compute ones = make(boot,1,1).&#10;      compute indboot = {rsum(indboot), indboot}.&#10;      do if (conmake = 1).&#10;        compute indboot={indboot, indcon}.&#10;      end if.&#10;      compute estmte=indboot(1,:).&#10;      compute indboot = indboot(2:(boot+1),:).&#10;      compute mnind = t(csum(indboot)/boot).&#10;      compute stdind=t(sqrt((cssq(indboot)-((csum(indboot)&amp;**2)/boot))/(boot-1))).&#10;      /* save indboot/outfile = 'c:\bootemp.sav' */.&#10;      compute llci=make(1,ncol(indboot),-999).&#10;      compute ulci=make(1,ncol(indboot),-999).&#10;      loop #e = 1 to ncol(indboot).&#10;        bcboot databcbt=indboot(:,#e)/estmte = (estmte(1,#e)*bconoff)+(9999*(1-bconoff)).&#10;        compute llci(1,#e)=llcit.&#10;        compute ulci(1,#e)=ulcit.&#10;        do if (badlo = 1 and llcit &lt;&gt; priorlo).&#10;          compute badend={badend, llcit}.&#10;          compute priorlo = llcit.&#10;        end if.&#10;        do if (badhi = 1 and ulcit &lt;&gt; priorhi).&#10;          compute badend={badend, ulcit}.&#10;          compute priorhi = ulcit.&#10;        end if.&#10;      end loop.&#10;      do if (effsize = 1 and dichy = 0 and ncovs = 0).&#10;        compute estmte=eff(1,:).&#10;        compute eff = eff(2:nrow(eff),:).&#10;        compute stdindf=t(sqrt((cssq(eff)-((csum(eff)&amp;**2)/boot))/(boot-1))).&#10;        compute llcif=make(1,ncol(eff),-999).&#10;        compute ulcif=make(1,ncol(eff),-999).&#10;        loop #e = 1 to ncol(eff).&#10;          bcboot databcbt=eff(:,#e)/estmte = (estmte(1,#e)*bconoff)+(9999*(1-bconoff)).&#10;          compute llcif(1,#e)=llcit.&#10;          compute ulcif(1,#e)=ulcit.&#10;          do if (badlo = 1 and llcit &lt;&gt; priorlo).&#10;            compute badend={badend, llcit}.&#10;            compute priorlo = llcit.&#10;          end if.&#10;          do if (badhi = 1 and ulcit &lt;&gt; priorhi).&#10;            compute badend={badend, ulcit}.&#10;            compute priorhi = ulcit.&#10;          end if.&#10;        end loop.&#10;      end if.&#10;      /* end of sorting algorithm */.&#10;    end if.&#10;    do if (boot &gt; 0).&#10;      compute outp = {obs, stdind, t(llci), t(ulci)}.&#10;      do if (nmeds = 1).&#10;        compute outp = outp(2,:).&#10;        compute rlbs = rlbs(2,1).&#10;      end if.&#10;      compute clbs = {&quot;Effect&quot;, &quot;Boot SE&quot;, &quot;BootLLCI&quot;, &quot;BootULCI&quot;}.&#10;      print outp/title = &quot;Indirect effect of X on Y&quot;/rnames = rlbs/cnames = clbs/format = F10.4.&#10;      do if (dichy = 0 and effsize = 1 and ncovs = 0).&#10;        compute outp = {psobs, stdindf((2*(nmeds+1)+1) :(3*(nmeds+1)),1), t(llcif(1,(2*(nmeds+1)+1):(3*(nmeds+1)))), t(ulcif(1,(2*(nmeds+1)+1):(3*(nmeds+1))))}.&#10;        do if (nmeds = 1).      &#10;          compute outp = outp(2,:).&#10;        end if.&#10;        print outp/title = &quot;Partially standardized indirect effect of X on Y&quot;/rnames = rlbs/cnames = clbs/format = F10.4.&#10;        compute outp = {csobs, stdindf((3*(nmeds+1)+1): (4*(nmeds+1)),1),  t(llcif(1,(3*(nmeds+1)+1):(4*(nmeds+1)))), t(ulcif(1,(3*(nmeds+1)+1):(4*(nmeds+1))))}.&#10;        do if (nmeds = 1).      &#10;          compute outp = outp(2,:).&#10;        end if.      &#10;        print outp/title = &quot;Completely standardized indirect effect of X on Y&quot;/rnames = rlbs/cnames = clbs/format = F10.4.    &#10;        compute outp = {pmobs, stdindf(1:(nmeds+1),1),t(llcif(1,1:(nmeds+1))), t(ulcif(1,1:(nmeds+1))) }.&#10;        do if (nmeds = 1).      &#10;          compute outp = outp(2,:).&#10;        end if.      &#10;        print outp/title = &quot;Ratio of indirect to total effect of X on Y&quot;/rnames = rlbs/cnames = clbs/format = F10.4.&#10;        compute outp = {rmobs, stdindf(((nmeds+1)+1) :(2*(nmeds+1)) ,1), t(llcif(1,((nmeds+1)+1):(2*(nmeds+1)))), t(ulcif(1,((nmeds+1)+1):(2*(nmeds+1))))}.&#10;        do if (nmeds = 1).      &#10;          compute outp = outp(2,:).&#10;        end if.      &#10;        print outp/title = &quot;Ratio of indirect to direct effect of X on Y&quot;/rnames = rlbs/cnames = clbs/format = F10.4.&#10;        do if (nmeds = 1 and cluster = 0 and ncovs = 0 and model = 4).      &#10;          compute r245obs = r245obs(1,1).&#10;          compute outp = {r245obs, stdindf((4*(nmeds+1)+1) :(4*(nmeds+1)+1),1), t(llcif(1,(4*(nmeds+1)+1):(4*(nmeds+1)+1))), t(ulcif(1,(4*(nmeds+1)+1):(4*(nmeds+1)+1)))}.    &#10;          print outp/title = &quot;R-squared mediation effect size (R-sq_med)&quot;/rnames = rlbs/cnames = clbs/format = F10.4.&#10;          compute outp = {kappa2ob, stdindf(nrow(stdindf),1),llcif(1,ncol(llcif)), ulcif(1,ncol(ulcif))}.    &#10;          print outp/title = &quot;Preacher and Kelley (2011) Kappa-squared&quot;/rnames = rlbs/cnames = clbs/format = F10.4.&#10;        end if.  &#10;      end if.&#10;    end if.&#10;    do if (normal = 1).&#10;      do if (nmeds = 1).&#10;        print sobel/title = &quot;Normal theory tests for indirect effect&quot;/clabels = &quot;Effect&quot;, &quot;se&quot;, &quot;Z&quot;, &quot;p&quot;/format = F10.4.&#10;      end if.&#10;      do if (nmeds &gt; 1).&#10;        compute rlbs2 = rlbs(2:nrow(rlbs),1).&#10;        print sobel/title = &quot;Normal theory tests for specific indirect effects&quot;/rnames = rlbs2/clabels = &quot;Effect&quot;, &quot;se&quot;, &quot;Z&quot;, &quot;p&quot;/format = F10.4.&#10;      end if.&#10;    end if.&#10;    do if (conmake = 1).&#10;      compute conkey=conkey(2:nrow(conkey),:).&#10;      compute conlbs = cntname(1:ncol(indcon),1).&#10;      print conkey/title = &quot;Specific indirect effect contrast definitions&quot;/rnames = conlbs/format = A10.&#10;    end if.&#10;  end if.&#10;  do if (model = 6).&#10;    compute clbs = {&quot;eff&quot;}.&#10;    compute rlbs = {&quot;TOTAL&quot;; t(mnames)}.&#10;    compute obs = t(indboot(1,:)).&#10;    compute obs = {csum(obs); obs}.&#10;    compute indlbl = indlbl(1:nrow(obs),1).&#10;    do if (conmake = 1).&#10;      compute obs={obs; t(indcon(1,:))}.&#10;      compute indlbl = {indlbl; cntname(1:ncol(indcon),1)}.&#10;    end if.&#10;    compute obs2=obs.&#10;    do if (boot = 0).&#10;      do if (dichy = 0 and effsize = 1 and ncovs = 0).&#10;        compute obs = {obs, obs/stddevy, (obs*stddevx/stddevy), obs/ctot, obs/mmpaths(nrow(mmpaths),1)}.&#10;        compute clbs = {&quot;eff&quot;, &quot;eff_ps&quot;, &quot;eff_cs&quot;, &quot;eff/c&quot;, &quot;eff/c'&quot;}.&#10;        compute obs2=obs.&#10;        do if (contrast = 1).&#10;          compute obs2 = obs(1:(nrow(obs)-concols),:).&#10;        end if.&#10;      end if.&#10;      print obs2/title = &quot;Indirect effect(s) of X on Y&quot;/rnames = indlbl/cnames = clbs/format = F8.4.&#10;      do if (contrast = 1 and effsize = 1).&#10;        compute outp2=t(indcon(1,:)).&#10;        compute rlbs2 = cntname(1:ncol(indcon),1).&#10;        print outp2/title = &quot;Contrast(s) between indirect effects&quot;/rnames = rlbs2/cnames=clbs/format = F10.4.&#10;      end if.&#10;    end if.&#10;    do if (boot &gt; 0).&#10;      compute ones = make(boot,1,1).&#10;      compute indboot = {rsum(indboot), indboot}.&#10;      do if (conmake = 1).&#10;        compute indboot={indboot, indcon}.&#10;      end if.&#10;      compute estmte=indboot(1,:).&#10;      compute indboot = indboot(2:(boot+1),:).&#10;      compute mnind = t(csum(indboot)/boot).&#10;      compute stdind=t(sqrt((cssq(indboot)-((csum(indboot)&amp;**2)/boot))/(boot-1))).&#10;      compute temp = nrow(indboot).&#10;      compute llci=make(1,ncol(indboot),-999).&#10;      compute ulci=make(1,ncol(indboot),-999).&#10;      loop #e = 1 to ncol(indboot).&#10;        bcboot databcbt = indboot(:,#e)/estmte=(estmte(1,#e)*bconoff)+(9999*(1-bconoff)).&#10;        compute llci(1,#e)=llcit.&#10;        compute ulci(1,#e)=ulcit.&#10;        do if (badlo = 1 and llcit &lt;&gt; priorlo).&#10;          compute badend={badend, llcit}.&#10;          compute priorlo = llcit.&#10;        end if.&#10;        do if (badhi = 1 and ulcit &lt;&gt; priorhi).&#10;          compute badend={badend, ulcit}.&#10;          compute priorhi = ulcit.&#10;        end if.&#10;      end loop.&#10;      compute obs = {obs, stdind, t(llci), t(ulci)}.&#10;      compute clbs = {&quot;Effect&quot;, &quot;Boot SE&quot;, &quot;BootLLCI&quot;, &quot;BootULCI&quot;}.&#10;      print obs/title = &quot;Indirect effect(s) of X on Y&quot;/rnames = indlbl/cnames = clbs/format = F10.4.&#10;      do if (effsize = 1 and dichy = 0 and ncovs = 0).&#10;        compute indboot=indboot(:,1:(ncol(indboot)-concols)).&#10;        compute eff = {rsum(abpseff), abpseff, rsum(abcseff), abcseff, rsum(pmeff), pmeff, rsum(rmeff), rmeff}. &#10;        compute effobs = eff(1,:).&#10;        compute eff = eff(2:nrow(eff),:).&#10;        compute stdindf=t(sqrt((cssq(eff)-((csum(eff)&amp;**2)/boot))/(boot-1))).&#10;        compute llcif=make(1,ncol(eff),-999).&#10;        compute ulcif=make(1,ncol(eff),-999).&#10;        loop #e = 1 to ncol(eff).&#10;          bcboot databcbt =eff(:,#e)/estmte = (effobs(1,#e)*bconoff)+(9999*(1-bconoff)).&#10;          compute llcif(1,#e)=llcit.&#10;          compute ulcif(1,#e)=ulcit.&#10;          do if (badlo = 1 and llcit &lt;&gt; priorlo).&#10;            compute badend={badend, llcit}.&#10;            compute priorlo = llcit.&#10;          end if.&#10;          do if (badhi = 1 and ulcit &lt;&gt; priorhi).&#10;            compute badend={badend, ulcit}.&#10;            compute priorhi = ulcit.&#10;          end if.&#10;        end loop.&#10;        compute temp2 = stdindf(1:ncol(indboot),1).&#10;        compute temp3 = effobs(:,1:ncol(indboot)).&#10;        compute templow = llcif(1,1:ncol(indboot)).&#10;        compute temphi = ulcif(1,1:ncol(indboot)).&#10;        compute outp = {t(temp3), temp2,t(templow), t(temphi)}.&#10;        print outp/title = &quot;Partially standardized indirect effect of X on Y&quot;/cnames = clbs/rnames = indlbl/format = F10.4.&#10;        compute temp2 = stdindf((ncol(indboot)+1):(2*ncol(indboot)),1).&#10;        compute temp3 = effobs(:,(ncol(indboot)+1):(2*ncol(indboot))).&#10;        compute templow = llcif(1,(ncol(indboot)+1):(2*ncol(indboot))).&#10;        compute temphi = ulcif(1,(ncol(indboot)+1):(2*ncol(indboot))).&#10;        compute outp = {t(temp3), temp2,t(templow), t(temphi)}.&#10;        print outp/title = &quot;Completely standardized indirect effect of X on Y&quot;/cnames = clbs/rnames = indlbl/format = F10.4.&#10;        compute temp2 = stdindf((2*(ncol(indboot))+1):(3*ncol(indboot)),1).&#10;        compute temp3 = effobs(:,(2*(ncol(indboot))+1):(3*ncol(indboot))).&#10;        compute templow = llcif(1,(2*(ncol(indboot))+1):(3*ncol(indboot))).&#10;        compute temphi =  ulcif(1,(2*(ncol(indboot))+1):(3*ncol(indboot))).&#10;        compute outp = {t(temp3), temp2,t(templow), t(temphi)}.&#10;        print outp/title = &quot;Ratio of indirect to total effect of X on Y&quot;/rnames = indlbl/cnames = clbs/format = F10.4.&#10;        compute temp = eff(:,(3*(ncol(indboot))+1):(4*ncol(indboot))).&#10;        compute temp2 = stdindf((3*(ncol(indboot))+1):(4*ncol(indboot)),1).&#10;        compute temp3 = effobs(:,(3*(ncol(indboot))+1):(4*ncol(indboot))).&#10;        compute templow = llcif(1,(3*(ncol(indboot))+1):(4*ncol(indboot))).&#10;        compute temphi = ulcif(1,(3*(ncol(indboot))+1):(4*ncol(indboot))). &#10;        compute outp = {t(temp3), temp2,t(templow), t(temphi)}.&#10;        print outp/title = &quot;Ratio of indirect to direct effect of X on Y&quot;/rnames = indlbl/cnames = clbs/format = F10.4.&#10;      end if.&#10;    end if.&#10;    do if (nmeds = 2).&#10;      compute effkey = {xname, &quot;-&gt;&quot;, mnames(1,1), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot;, mnames(1,1), &quot;-&gt;&quot;, mnames(1,2), &quot;-&gt;&quot;, yname}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot;, mnames(1,2), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {indlbl(2:4,1), effkey}.&#10;    end if.&#10;    do if (nmeds = 3).&#10;      compute effkey = {xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, mnames(1,2), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, mnames(1,3), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, mnames(1,2), &quot;-&gt;&quot;, mnames(1,3), &quot;-&gt;&quot;, yname}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,2), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,2), &quot;-&gt;&quot;, mnames(1,3), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,3), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {indlbl(2:8,1), effkey}.&#10;    end if.&#10;    do if (nmeds = 4).&#10;      compute effkey = {xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, mnames(1,2), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, mnames(1,3), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, mnames(1,4), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, mnames(1,2), &quot;-&gt;&quot;, mnames(1,3), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, mnames(1,2), &quot;-&gt;&quot;, mnames(1,4), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, mnames(1,3), &quot;-&gt;&quot;, mnames(1,4), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,1), &quot;-&gt;&quot;, mnames(1,2), &quot;-&gt;&quot;, mnames(1,3), &quot;-&gt;&quot;, mnames(1,4), &quot;-&gt;&quot;, yname}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,2), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,2), &quot;-&gt;&quot;, mnames(1,3), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,2), &quot;-&gt;&quot;, mnames(1,4), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,2), &quot;-&gt;&quot;, mnames(1,3), &quot;-&gt;&quot;, mnames(1,4), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,3), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,3), &quot;-&gt;&quot;, mnames(1,4), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {effkey; xname, &quot;-&gt;&quot; , mnames(1,4), &quot;-&gt;&quot;, yname, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;}.&#10;      compute effkey = {indlbl(2:16,1), effkey}.&#10;    end if.&#10;    print effkey/title = &quot;Indirect effect key&quot;/format = A8.&#10;    do if (conmake = 1).&#10;      compute conkey=conkey(2:nrow(conkey),:).&#10;      compute conlbs = cntname(1:ncol(indcon),1).&#10;      print conkey/title = &quot;Specific indirect effect contrast definitions&quot;/rnames = conlbs/format = A10.&#10;    end if.&#10;  end if.&#10;end if.&#10;do if (bad &gt; 0).&#10;  compute note(notes,1) = 9.&#10;  compute notes = notes + 1.&#10;end if.&#10;print/title = &quot;******************** ANALYSIS NOTES AND WARNINGS *************************&quot;.&#10;loop i = 1 to errs.&#10;  do if (runerrs(i,1) = 1).&#10;    print/title = &quot;ERROR: One of your declared mediators is dichotomous.  This procedure can't be used.&quot;.&#10;  end if.&#10;  do if (runerrs(i,1) = 2).&#10;    print/title = &quot;ERROR: For model 6, this procedure limits the number of mediators to four.&quot;.&#10;  end if.&#10;  do if (runerrs(i,1) = 3).&#10;    print/title = &quot;ERROR: For models 1, 2, and 3, only a single variable can be listed in the M list.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 4).&#10;    print/title = &quot;ERROR: You requested a model involving W but did not provide a valid W variable name.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 5).&#10;    print/title = &quot;ERROR: You requested a model involving Z but did not provide a valid Z variable name.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 6).&#10;    print/title = &quot;ERROR: You requested a model involving Q but did not provide a valid Q variable name.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 7).&#10;    print/title = &quot;ERROR: You requested a model involving V but did not provide a valid V variable name.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 8).&#10;    print/title = &quot;ERROR: You specified a W variable for a model that does not need it&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 9).&#10;    print/title = &quot;ERROR: You specified a Z variable for a model that does not need it&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 10).&#10;    print/title = &quot;ERROR: You specified a Q variable for a model that does not need it&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 11).&#10;    print/title = &quot;ERROR: You specified a V variable for a model that does not need it.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 12).&#10;    print/title = &quot;ERROR: The variable specified for W has already been assigned.&quot;.&#10;  end if.&#10;  do if (runerrs(i,1) = 13).&#10;    print/title = &quot;ERROR: The variable specified for Z has already been assigned.&quot;.&#10;  end if.   &#10;  do if (runerrs(i,1) = 14).&#10;    print/title = &quot;ERROR: The variable specified for Q has already been assigned.&quot;.&#10;  end if.   &#10;  do if (runerrs(i,1) = 15).&#10;    print/title = &quot;ERROR: The variable specified for V has already been assigned.&quot;.&#10;  end if.   &#10;  do if (runerrs(i,1) = 16).&#10;    print/title = &quot;ERROR: You did not provide a valid Y variable name.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 17).&#10;    print/title = &quot;ERROR: The variable specified for Y has already been assigned.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 18).&#10;    print/title = &quot;ERROR: Model 6 requires more than one mediator.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 19).&#10;    print/title = &quot;ERROR: You have not specified a valid model number.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 20).&#10;    print/title = &quot;ERROR: At least one and only one variable can be listed for X.&quot;.&#10;  end if.&#10;  do if (runerrs(i,1) = 21).&#10;    print/title = &quot;ERROR: At least one and only one variable can be listed for Y.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 22).&#10;    print/title = &quot;ERROR: Iteration didn't converge to a solution.  Interpret results with caution.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 23).&#10;    print/title = &quot;ERROR: Your specified a clustering variable that does not exist in your variable list.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 24).&#10;    print/title = &quot;ERROR: You specified a clustering variable that has already been assigned.&quot;.&#10;  end if. &#10;  do if (runerrs(i,1) = 25).&#10;    print/title = &quot;ERROR: One or more of your M variables is not listed in the variables list.&quot;.&#10;  end if.&#10;  do if (runerrs(i,1) = 26).&#10;    print/title = &quot;ERROR: A maximum of 20 cluster units is allowed.  Use multilevel modeling instead.&quot;.&#10;  end if.&#10;  do if (runerrs(i,1) = 27).&#10;    print/title = &quot;ERROR: One of the variables in your model is a constant.&quot;.&#10;  end if.&#10;end loop.&#10;do if (errs = 0).&#10;  do if (boot &gt; 1).&#10;    do if (bconoff = 1).&#10;      print boot/title = &quot;Number of bootstrap samples for bias corrected bootstrap confidence intervals:&quot;/format = F8.0.&#10;    end if.&#10;    do if (bconoff = 0).&#10;      print boot/title = &quot;Number of bootstrap samples for percentile bootstrap confidence intervals:&quot;/format = F8.0.&#10;    end if.&#10;    do if (booterr = 1).&#10;      compute badend = badend(1,2:ncol(badend)).&#10;      print badend/title = &quot;WARNING: Bootstrap CI endpoints below not trustworthy.  Decrease confidence or increase bootstraps&quot;/format = F10.4.&#10;    end if.&#10;  end if.&#10;  print conf/title = &quot;Level of confidence for all confidence intervals in output:&quot;/format = F8.2.&#10;  do if (center = 1 and (ncol(centvar) &gt; 1)).&#10;    compute centvar = centvar(1,2:ncol(centvar)).&#10;    print centvar/title = &quot;NOTE: The following variables were mean centered prior to analysis:&quot;/format = a8.&#10;  end if.&#10;  loop i = 1 to notes.&#10;    do if (note(i,1) = 1).&#10;      print/title = &quot;NOTE: Confidence level restricted to between 50 and 99.9999%.  95% confidence is provided in output&quot;.&#10;    end if.&#10;    do if (note(i,1) = 2).&#10;      print/title = &quot;NOTE: Effect size measures for indirect effects not available for models with dichotomous outcomes&quot;.&#10;    end if.&#10;    do if (note(i,1) = 3).&#10;      print/title = &quot;NOTE: All standard errors for continuous outcome models are based on the HC3 estimator&quot;.&#10;    end if.&#10;    do if (note(i,1) = 6).&#10;      print/title = &quot;NOTE: The number of bootstrap samples was adjusted upward given your desired confidence&quot;. &#10;    end if.&#10;    do if (note(i,1) = 7).&#10;      print/title = &quot;NOTE: The Johnson-Neyman method is available only for Models 1 and 3&quot;.&#10;    end if.&#10;    do if (note(i,1) = 8).&#10;      print/title = &quot;NOTE: The Johnson-Neyman method cannot be used with a dichotomous moderator&quot;.&#10;    end if.&#10;    do if (note(i,1)=9).&#10;      print bad/title = &quot;NOTE: Some bootstrap samples had to be replaced.  The number of such replacements was:&quot;.&#10;    end if.&#10;    do if (note(i,1) = 10).&#10;      print/title = &quot;NOTE: Effect size measures for indirect effects not available for models with covariates&quot;.&#10;    end if.&#10;    do if (note(i,1) = 11).&#10;      print nmiss/title = &quot;NOTE: Some cases were deleted due to missing data.  The number of such cases was:&quot;.&#10;    end if.&#10;  end loop.&#10;end if.&#10;end matrix.&#10;match files/file = */drop = w999999t z999999t q999999t v999999t.&#10;execute.&#10;set printback=on.&#10;!enddefine.&#10;&#10;PROCESS vars = %%y%% %%x%% %%m%% %%c%% %%w%% %%z%% %%v%% %%q%%&#10;  /y=%%y%%/x=%%x%%/m=%%m%%/w=%%w%%/z=%%z%%/v=%%v%%/q=%%q%%/&#10;  model =%%model%%/boot=%%boot%%/center=%%center%%/hc3=%%hc3%%/effsize=%%effsize%%/&#10;  normal=%%normal%%/coeffci=%%coeffci%%/conf=%%conf%%/percent=%%percent%%/total=%%total%%/&#10;  covmy=%%covmy%%/jn=%%jn%%/quantile =%%quantile%%/plot=%%plot%%/contrast=%%contrast%%..&#10; &#10;&#10;&#10;&#10;"/><Property description="false" name="PROCESS Procedure for SPSS, written by Andrew F. Hayes (www.afhayes.com)_modal"/><Property description="" descriptionKey="source_vars_tooltip.LABEL" isList="true" label="Data File Variables" labelKey="source_vars.LABEL" name="source_vars" selectionPool="source_fields" syntax="%%ThisValue%%" valueType="field"/><Property description="" descriptionKey="y_tooltip.LABEL" isList="true" isRequired="true" label="Outcome Variable (Y)" labelKey="y.LABEL" name="y" selectionPool="source_fields" syntax="%%ThisValue%%" valueType="field"/><Property description="" descriptionKey="x_tooltip.LABEL" isList="true" isRequired="true" label="Independent Variable (X)" labelKey="x.LABEL" name="x" selectionPool="source_fields" syntax="%%ThisValue%%" valueType="field"/><Property description="" descriptionKey="m_tooltip.LABEL" isList="true" isRequired="true" label="M Variable(s)" labelKey="m.LABEL" name="m" selectionPool="source_fields" syntax="%%ThisValue%%" valueType="field"/><Property description="" descriptionKey="w_tooltip.LABEL" isList="true" label="Proposed Moderator W" labelKey="w.LABEL" name="w" selectionPool="source_fields" syntax="%%ThisValue%%" valueType="field"/><Property description="" descriptionKey="z_tooltip.LABEL" isList="true" label="Proposed Moderator Z" labelKey="z.LABEL" name="z" selectionPool="source_fields" syntax="%%ThisValue%%" valueType="field"/><Property description="" descriptionKey="v_tooltip.LABEL" isList="true" label="Proposed Moderator V" labelKey="v.LABEL" name="v" selectionPool="source_fields" syntax="%%ThisValue%%" valueType="field"/><Property defaultValue="model4" description="" descriptionKey="model_tooltip.LABEL" label="Model Number" labelKey="model.LABEL" name="model" syntax="%%ThisValue%%" valueType="enum"><Enumeration><Enum label="1" labelKey="model1.LABEL" syntax="1" value="model1"/><Enum label="2" labelKey="model2.LABEL" syntax="2" value="model2"/><Enum label="3" labelKey="model3.LABEL" syntax="3" value="model3"/><Enum label="4" labelKey="model4.LABEL" syntax="4" value="model4"/><Enum label="5" labelKey="model5.LABEL" syntax="5" value="model5"/><Enum label="6" labelKey="model6.LABEL" syntax="6" value="model6"/><Enum label="7" labelKey="model7.LABEL" syntax="7" value="model7"/><Enum label="8" labelKey="model8.LABEL" syntax="8" value="model8"/><Enum label="9" labelKey="model9.LABEL" syntax="9" value="model9"/><Enum label="10" labelKey="model10.LABEL" syntax="10" value="model10"/><Enum label="11" labelKey="model11.LABEL" syntax="11" value="model11"/><Enum label="12" labelKey="model12.LABEL" syntax="12" value="model12"/><Enum label="13" labelKey="model13.LABEL" syntax="13" value="model13"/><Enum label="14" labelKey="model14.LABEL" syntax="14" value="model14"/><Enum label="15" labelKey="model15.LABEL" syntax="15" value="model15"/><Enum label="16" labelKey="model16.LABEL" syntax="16" value="model16"/><Enum label="17" labelKey="model17.LABEL" syntax="17" value="model17"/><Enum label="18" labelKey="model18.LABEL" syntax="18" value="model18"/><Enum label="19" labelKey="model19.LABEL" syntax="19" value="model19"/><Enum label="20" labelKey="model20.LABEL" syntax="20" value="model20"/><Enum label="21" labelKey="model21.LABEL" syntax="21" value="model21"/><Enum label="22" labelKey="model22.LABEL" syntax="22" value="model22"/><Enum label="23" labelKey="model23.LABEL" syntax="23" value="model23"/><Enum label="24" labelKey="model24.LABEL" syntax="24" value="model24"/><Enum label="25" labelKey="model25.LABEL" syntax="25" value="model25"/><Enum label="26" labelKey="model26.LABEL" syntax="26" value="model26"/><Enum label="27" labelKey="model27.LABEL" syntax="27" value="model27"/><Enum label="28" labelKey="model28.LABEL" syntax="28" value="model28"/><Enum label="29" labelKey="model29.LABEL" syntax="29" value="model29"/><Enum label="30" labelKey="model30.LABEL" syntax="30" value="model30"/><Enum label="31" labelKey="model31.LABEL" syntax="31" value="model31"/><Enum label="32" labelKey="model32.LABEL" syntax="32" value="model32"/><Enum label="33" labelKey="model33.LABEL" syntax="33" value="model33"/><Enum label="34" labelKey="model34.LABEL" syntax="34" value="model34"/><Enum label="35" labelKey="model35.LABEL" syntax="35" value="model35"/><Enum label="36" labelKey="model36.LABEL" syntax="36" value="model36"/><Enum label="37" labelKey="model37.LABEL" syntax="37" value="model37"/><Enum label="38" labelKey="model38.LABEL" syntax="38" value="model38"/><Enum label="39" labelKey="model39.LABEL" syntax="39" value="model39"/><Enum label="40" labelKey="model40.LABEL" syntax="40" value="model40"/><Enum label="41" labelKey="model41.LABEL" syntax="41" value="model41"/><Enum label="42" labelKey="model42.LABEL" syntax="42" value="model42"/><Enum label="43" labelKey="model43.LABEL" syntax="43" value="model43"/><Enum label="44" labelKey="model44.LABEL" syntax="44" value="model44"/><Enum label="45" labelKey="model45.LABEL" syntax="45" value="model45"/><Enum label="46" labelKey="model46.LABEL" syntax="46" value="model46"/><Enum label="47" labelKey="model47.LABEL" syntax="47" value="model47"/><Enum label="48" labelKey="model48.LABEL" syntax="48" value="model48"/><Enum label="49" labelKey="model49.LABEL" syntax="49" value="model49"/><Enum label="50" labelKey="model50.LABEL" syntax="50" value="model50"/><Enum label="51" labelKey="model51.LABEL" syntax="51" value="model51"/><Enum label="52" labelKey="model52.LABEL" syntax="52" value="model52"/><Enum label="53" labelKey="model53.LABEL" syntax="53" value="model53"/><Enum label="54" labelKey="model54.LABEL" syntax="54" value="model54"/><Enum label="55" labelKey="model55.LABEL" syntax="55" value="model55"/><Enum label="56" labelKey="model56.LABEL" syntax="56" value="model56"/><Enum label="57" labelKey="model57.LABEL" syntax="57" value="model57"/><Enum label="58" labelKey="model58.LABEL" syntax="58" value="model58"/><Enum label="59" labelKey="model59.LABEL" syntax="59" value="model59"/><Enum label="60" labelKey="model60.LABEL" syntax="60" value="model60"/><Enum label="61" labelKey="model61.LABEL" syntax="61" value="model61"/><Enum label="62" labelKey="model62.LABEL" syntax="62" value="model62"/><Enum label="63" labelKey="model63.LABEL" syntax="63" value="model63"/><Enum label="64" labelKey="model64.LABEL" syntax="64" value="model64"/><Enum label="65" labelKey="model65.LABEL" syntax="65" value="model65"/><Enum label="66" labelKey="model66.LABEL" syntax="66" value="model66"/><Enum label="67" labelKey="model67.LABEL" syntax="67" value="model67"/><Enum label="68" labelKey="model68.LABEL" syntax="68" value="model68"/><Enum label="69" labelKey="model69.LABEL" syntax="69" value="model69"/><Enum label="70" labelKey="model70.LABEL" syntax="70" value="model70"/><Enum label="71" labelKey="model71.LABEL" syntax="71" value="model71"/><Enum label="72" labelKey="model72.LABEL" syntax="72" value="model72"/><Enum label="73" labelKey="model73.LABEL" syntax="73" value="model73"/><Enum label="74" labelKey="model_a.LABEL" syntax="74" value="model_a"/></Enumeration></Property><Property description="" descriptionKey="c_tooltip.LABEL" isList="true" label="Covariate(s)" labelKey="c.LABEL" name="c" selectionPool="source_fields" syntax="%%ThisValue%%" valueType="field"/><Property description="" descriptionKey="q_tooltip.LABEL" isList="true" label="Proposed Moderator Q" labelKey="q.LABEL" name="q" selectionPool="source_fields" syntax="%%ThisValue%%" valueType="field"/><Property description="" descriptionKey="item_35_tooltip.LABEL" label="Probing Method" labelKey="item_35.LABEL" name="item_35" syntax="%%ThisValue%%"/><Property defaultValue="item_39_a" description="" descriptionKey="quantile_tooltip.LABEL" label="Pick-a-Point" labelKey="quantile.LABEL" name="quantile" syntax="%%ThisValue%%" valueType="enum"><Enumeration><Enum description="" descriptionKey="item_39_a_tooltip.LABEL" hasSubGroup="false" label="Mean and +\- 1 SD from Mean" labelKey="item_39_a.LABEL" syntax="0" value="item_39_a"/><Enum description="" descriptionKey="item_39_b_tooltip.LABEL" hasSubGroup="false" label="Percentiles" labelKey="item_39_b.LABEL" syntax="1" value="item_39_b"/></Enumeration></Property><Property defaultValue="false" description="" descriptionKey="jn_tooltip.LABEL" label="Johnson-Neyman (Models 1 and 3 only)" labelKey="jn.LABEL" name="jn" syntax="1±0" valueType="boolean"/><Property description="" descriptionKey="item_231_tooltip.LABEL" label="Bootstrapping for indirect effects" labelKey="item_231.LABEL" name="item_231" syntax="%%ThisValue%%"/><Property defaultValue="item_17_b" description="" descriptionKey="boot_tooltip.LABEL" label="Bootstrap Samples" labelKey="boot.LABEL" name="boot" syntax="%%ThisValue%%" valueType="enum"><Enumeration><Enum label="0" labelKey="item_17_a.LABEL" syntax="0" value="item_17_a"/><Enum label="1000" labelKey="item_17_b.LABEL" syntax="1000" value="item_17_b"/><Enum label="2000" labelKey="item_17_c.LABEL" syntax="2000" value="item_17_c"/><Enum label="5000" labelKey="item_17_d.LABEL" syntax="5000" value="item_17_d"/><Enum label="10000" labelKey="item_17_e.LABEL" syntax="10000" value="item_17_e"/><Enum label="20000" labelKey="item_17_f.LABEL" syntax="20000" value="item_17_f"/><Enum label="50000" labelKey="item_17_g.LABEL" syntax="50000" value="item_17_g"/></Enumeration></Property><Property defaultValue="item_53_b" description="" descriptionKey="percent_tooltip.LABEL" label="Bootstrap CI method" labelKey="percent.LABEL" name="percent" syntax="%%ThisValue%%" valueType="enum"><Enumeration><Enum description="First radio button" descriptionKey="item_53_a_tooltip.LABEL" hasSubGroup="false" label="Percentile" labelKey="item_53_a.LABEL" syntax="1" value="item_53_a"/><Enum description="Second radio button" descriptionKey="item_53_b_tooltip.LABEL" hasSubGroup="false" label="Bias Corrected" labelKey="item_53_b.LABEL" syntax="0" value="item_53_b"/></Enumeration></Property><Property defaultValue="item_372_a" description="" descriptionKey="covmy_tooltip.LABEL" label="Covariate(s) in model(s) of..." labelKey="covmy.LABEL" name="covmy" syntax="%%ThisValue%%" valueType="enum"><Enumeration><Enum description="First radio button" descriptionKey="item_372_a_tooltip.LABEL" hasSubGroup="false" label="...both M and Y" labelKey="item_372_a.LABEL" syntax="0" value="item_372_a"/><Enum description="Second radio button" descriptionKey="item_372_b_tooltip.LABEL" hasSubGroup="false" label="...M only" labelKey="item_372_b.LABEL" syntax="1" value="item_372_b"/><Enum description="" descriptionKey="item_372_c_tooltip.LABEL" hasSubGroup="false" label="...Y only" labelKey="item_372_c.LABEL" syntax="2" value="item_372_c"/></Enumeration></Property><Property defaultValue="item_78_b" description="" descriptionKey="conf_tooltip.LABEL" label="Confidence level for confidence intervals" labelKey="conf.LABEL" name="conf" syntax="%%ThisValue%%" valueType="enum"><Enumeration><Enum label="90%" labelKey="item_78_a.LABEL" syntax="90" value="item_78_a"/><Enum label="95%" labelKey="item_78_b.LABEL" syntax="95" value="item_78_b"/><Enum label="99%" labelKey="item_78_c.LABEL" syntax="100" value="item_78_c"/></Enumeration></Property><Property defaultValue="false" description="" descriptionKey="center_tooltip.LABEL" label="Mean center for products" labelKey="center.LABEL" name="center" syntax="1±0" valueType="boolean"/><Property defaultValue="false" description="" descriptionKey="hc3_tooltip.LABEL" label="Heteroscedasticity-consistent SEs" labelKey="hc3.LABEL" name="hc3" syntax="1±0" valueType="boolean"/><Property defaultValue="false" description="" descriptionKey="coeffci_tooltip.LABEL" label="OLS/ML confidence intervals" labelKey="coeffci.LABEL" name="coeffci" syntax="1±0" valueType="boolean"/><Property defaultValue="false" description="" descriptionKey="plot_tooltip.LABEL" label="Generate data for plotting (model 1, 2, and 3 only)" labelKey="plot.LABEL" name="plot" syntax="1±0" valueType="boolean"/><Property defaultValue="false" description="" descriptionKey="effsize_tooltip.LABEL" label="Effect size (models 4 and 6)" labelKey="effsize.LABEL" name="effsize" syntax="1±0" valueType="boolean"/><Property defaultValue="false" description="" descriptionKey="normal_tooltip.LABEL" label="Sobel test (model 4 only)" labelKey="normal.LABEL" name="normal" syntax="1±0" valueType="boolean"/><Property defaultValue="false" description="" descriptionKey="total_tooltip.LABEL" label="Total effect model (models 4 and 6 only)" labelKey="total.LABEL" name="total" syntax="1±0" valueType="boolean"/><Property defaultValue="false" description="" descriptionKey="contrast_tooltip.LABEL" label="Compare indirect effects (models 4 and 6 only)" labelKey="contrast.LABEL" name="contrast" syntax="1±0" valueType="boolean"/></Properties><SelectionPool id="source_fields" type="fields"/><UserInterface><Tabs><Tab helpLink="" label=""><PropertiesPanel><SourceFieldsBrowser copyFields="false" property="source_vars" selectionPool="source_fields" storage="[real integer date time string]"><Layout columnWeight="1.0" fill="both" gridColumn="0" gridRow="0" gridWidth="1" rowWeight="1.0"/></SourceFieldsBrowser><SingleFieldChooserControl property="y" storage="[real integer]"><Layout columnWeight="1.0" fill="horizontal" gridColumn="2" gridRow="0" gridWidth="1" rowWeight="0.0"/></SingleFieldChooserControl><SingleFieldChooserControl property="x" storage="[real integer]"><Layout columnWeight="1.0" fill="horizontal" gridColumn="2" gridRow="1" gridWidth="1" rowWeight="0.0"/></SingleFieldChooserControl><MultiFieldChooserControl property="m" storage="[real integer]"><Layout columnWeight="1.0" fill="both" gridColumn="2" gridRow="2" gridWidth="1" rowWeight="1.0"/></MultiFieldChooserControl><SingleFieldChooserControl property="w" storage="[real integer]"><Layout columnWeight="1.0" fill="horizontal" gridColumn="2" gridRow="4" gridWidth="1" rowWeight="0.0"/></SingleFieldChooserControl><SingleFieldChooserControl property="z" storage="[real integer]"><Layout columnWeight="1.0" fill="horizontal" gridColumn="2" gridRow="5" gridWidth="1" rowWeight="0.0"/></SingleFieldChooserControl><SingleFieldChooserControl property="v" storage="[real integer]"><Layout columnWeight="1.0" fill="horizontal" gridColumn="2" gridRow="6" gridWidth="1" rowWeight="0.0"/></SingleFieldChooserControl><ComboBoxControl attr_name="" based_on="variable_names" property="model" target_id="" use_values="false"><Layout columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="1" gridWidth="1" rowWeight="0.0"/></ComboBoxControl><MultiFieldChooserControl property="c" storage="[real integer]"><Layout columnWeight="1.0" fill="both" gridColumn="2" gridRow="3" gridWidth="1" rowWeight="1.0"/></MultiFieldChooserControl><PropertiesSubPanel buttonLabel="About" buttonLabelKey="item_61.LABEL" dialogTitle="PROCESS for SPSS" dialogTitleKey="PROCESS for SPSS.TITLE" helpLink=""><Layout columnWeight="0.0" fill="none" gridColumn="3" gridRow="0" gridWidth="1" rowWeight="0.0"/><PropertiesPanel><StaticText text="Written by Andrew F. Hayes, Ph.D." textKey="item_44.LABEL"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="0" gridWidth="1" rowWeight="0.0"/></StaticText><StaticText text="The Ohio State University" textKey="item_45.LABEL"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="1" gridWidth="1" rowWeight="0.0"/></StaticText><StaticText text="hayes.338@osu.edu" textKey="item_46.LABEL"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="2" gridWidth="1" rowWeight="0.0"/></StaticText><StaticText text="http://www.afhayes.com/" textKey="item_47.LABEL"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="5" gridWidth="1" rowWeight="0.0"/></StaticText><StaticText text="Beta version 130612" textKey="item_48.LABEL"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="3" gridWidth="1" rowWeight="0.0"/></StaticText><StaticText text="Documentation available at" textKey="item_95.LABEL"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="4" gridWidth="1" rowWeight="0.0"/></StaticText><StaticText text="Use at your own risk" textKey="item_96.LABEL"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="6" gridWidth="1" rowWeight="0.0"/></StaticText><StaticText text="Stay appraised of updates at" textKey="item_54.LABEL"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="7" gridWidth="1" rowWeight="0.0"/></StaticText><StaticText text="http://www.facebook.com" textKey="item_56.LABEL"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="8" gridWidth="1" rowWeight="0.0"/></StaticText><StaticText text="/mediation.and.moderation.analysis" textKey="item_57.LABEL"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="9" gridWidth="1" rowWeight="1.0"/></StaticText></PropertiesPanel></PropertiesSubPanel><SingleFieldChooserControl property="q" storage="[real integer]"><Layout columnWeight="1.0" fill="horizontal" gridColumn="2" gridRow="7" gridWidth="1" rowWeight="0.0"/></SingleFieldChooserControl><PropertiesSubPanel buttonLabel="Conditioning" buttonLabelKey="item_70.LABEL" dialogTitle="" dialogTitleKey="dialog6.TITLE" helpLink=""><Layout columnWeight="0.0" fill="none" gridColumn="3" gridRow="2" gridWidth="1" rowWeight="0.0"/><PropertiesPanel><PropertiesPanel id="item_35" label="Probing Method" labelKey="item_35.LABEL"><Layout columnWeight="1.0" fill="both" gridColumn="0" gridRow="0" gridWidth="1" rowWeight="1.0"/><RadioButtonGroupControl property="quantile" rows="2" useSubPanel="false"><Layout columnWeight="1.0" fill="both" gridColumn="0" gridRow="0" gridWidth="1" rowWeight="0.0"/><RadioButton property="item_39_a"/><RadioButton property="item_39_b"/></RadioButtonGroupControl><CheckBoxControl property="jn"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="1" gridWidth="1" rowWeight="1.0"/></CheckBoxControl></PropertiesPanel></PropertiesPanel></PropertiesSubPanel><PropertiesPanel id="item_231" label="Bootstrapping for indirect effects" labelKey="item_231.LABEL"><Layout columnWeight="1.0" fill="both" gridColumn="0" gridRow="2" gridWidth="1" rowWeight="1.0"/><ComboBoxControl attr_name="" based_on="variable_names" property="boot" target_id="" use_values="false"><Layout columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="0" gridWidth="1" rowWeight="0.0"/></ComboBoxControl><RadioButtonGroupControl property="percent" rows="2" useSubPanel="false"><Layout columnWeight="1.0" fill="both" gridColumn="0" gridRow="1" gridWidth="1" rowWeight="1.0"/><RadioButton property="item_53_a"/><RadioButton property="item_53_b"/></RadioButtonGroupControl></PropertiesPanel><RadioButtonGroupControl property="covmy" rows="3" useSubPanel="false"><Layout columnWeight="1.0" fill="both" gridColumn="0" gridRow="4" gridWidth="1" rowWeight="1.0"/><RadioButton property="item_372_a"/><RadioButton property="item_372_b"/><RadioButton property="item_372_c"/></RadioButtonGroupControl><ComboBoxControl attr_name="" based_on="variable_names" property="conf" target_id="" use_values="false"><Layout columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="3" gridWidth="1" rowWeight="0.0"/></ComboBoxControl><PropertiesSubPanel buttonLabel="Options" buttonLabelKey="item_51.LABEL" dialogTitle="PROCESS Options" dialogTitleKey="dialog5.TITLE" helpLink=""><Layout columnWeight="0.0" fill="none" gridColumn="3" gridRow="1" gridWidth="1" rowWeight="0.0"/><PropertiesPanel><CheckBoxControl property="center"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="0" gridWidth="1" rowWeight="0.0"/></CheckBoxControl><CheckBoxControl property="hc3"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="1" gridWidth="1" rowWeight="0.0"/></CheckBoxControl><CheckBoxControl property="coeffci"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="2" gridWidth="1" rowWeight="0.0"/></CheckBoxControl><CheckBoxControl property="plot"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="3" gridWidth="1" rowWeight="0.0"/></CheckBoxControl><CheckBoxControl property="effsize"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="4" gridWidth="1" rowWeight="0.0"/></CheckBoxControl><CheckBoxControl property="normal"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="5" gridWidth="1" rowWeight="0.0"/></CheckBoxControl><CheckBoxControl property="total"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="6" gridWidth="1" rowWeight="0.0"/></CheckBoxControl><CheckBoxControl property="contrast"><Layout columnWeight="1.0" fill="none" gridColumn="0" gridRow="7" gridWidth="1" rowWeight="1.0"/></CheckBoxControl></PropertiesPanel></PropertiesSubPanel><StaticText text="This dialog was created using a later version of PASW Statistics\nand certain features may not function as intended." textKey="v17_warning.LABEL"><Layout columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="5" gridWidth="1" rowWeight="1.0"/></StaticText></PropertiesPanel></Tab></Tabs></UserInterface></Node></Extension>